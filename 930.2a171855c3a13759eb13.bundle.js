"use strict";(self.webpackChunkJolteon=self.webpackChunkJolteon||[]).push([[930],{7922:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,"model-selector input {\n  display: block;\n  height: 45px;\n  margin: 10px;\n  width: calc(100% - 20px);\n}\n.schemalist {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 10px;\n  box-sizing: border-box;\n}\n.schema {\n  cursor: pointer;\n  margin: 10px;\n  padding: 8px;\n  border-width: 1px;\n  border-style: solid;\n  border-color: var(--accent1);\n  border-radius: 5px;\n  width: calc(25% - 20px);\n  height: 135px;\n}\n.schema h6 {\n  word-wrap: break-word;\n  padding-bottom: 4px;\n  border-bottom: 1px dashed rgba(255, 255, 255, 0.3);\n}\n.schema ul {\n  list-style: none;\n}\n.schema:hover {\n  border-color: var(--accent0);\n}\n",""]);const d=o},9376:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,"",""]);const d=o},4370:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,".effectlist {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n}\n.effectlist effect {\n  margin-top: 10px;\n}\n.effectlist effect:not(:last-child) {\n  margin-bottom: 10px;\n}\n.effectlist effect {\n  box-shadow: var(--shadow) 4px 4px 4px;\n  padding: 10px;\n  border-width: 1px;\n  border-style: solid;\n  border-color: var(--accent1);\n  border-radius: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n}\n.effectlist effect .effectSection :not(:last-child) {\n  margin-right: 15px;\n}\n.effectlist effect ul {\n  list-style: none;\n}\n.effectlist effect .effecttitle {\n  display: flex;\n}\n.effectlist effect .effecttitle .effecttitletitle {\n  display: flex;\n  flex-grow: 1;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.3);\n  margin-bottom: 8px;\n}\n.effectlist effect .effecttitle .effecttitletitle h5 {\n  word-wrap: normal;\n  color: var(--front0);\n  padding-right: 8px;\n  margin-right: auto;\n  margin-bottom: 0px;\n}\n.effectlist effect .effecttitle .effecttitletitle h5:not(:first-of-type) {\n  opacity: 0.4;\n}\n.effectlist effect .effecttitle .effecttitletitle h5:last-of-type {\n  flex-grow: 1;\n}\n.effectlist effect .effecttitle .effecttitletitle:hover > h5 {\n  color: var(--accent0);\n}\n.effectlist effect .effecttitle button {\n  margin-left: 10px;\n}\n",""]);const d=o},2682:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,"propertygrid .property {\n  /* offset-x | offset-y | blur-radius | spread-radius | color */\n  box-shadow: var(--shadow) 4px 4px 4px;\n}\npropertygrid > div > table {\n  width: 100%;\n  table-layout: auto;\n}\npropertygrid > div > table > tbody > tr td {\n  padding: 16px 0px 8px 8px;\n}\npropertygrid > div > table > tbody > tr:first-child > td {\n  padding: 0px 0px 8px 8px;\n}\npropertygrid > div > table > tbody > tr > td:first-child {\n  white-space: nowrap;\n}\npropertygrid > div > table > tbody > tr > td:last-child {\n  width: 100%;\n}\n",""]);const d=o},7562:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,"",""]);const d=o},4147:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,"trigger {\n  display: flex;\n}\ntrigger :not(:last-child) {\n  margin-right: 15px;\n}\n",""]);const d=o},545:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(8081),i=n.n(a),s=n(3645),o=n.n(s)()(i());o.push([e.id,"zone td {\n  padding-right: 8px;\n}\n",""]);const d=o},8702:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(1804);class i extends a.e{getAll(e={}){return this.request(Object.assign({path:"/api/models/effect/all",method:"GET",format:"json"},e))}getEffect(e,t={}){return this.request(Object.assign({path:`/api/models/effect/${e}`,method:"GET",format:"json"},t))}putEffect(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}deleteEffect(e,t={}){return this.request(Object.assign({path:`/api/models/effect/${e}`,method:"DELETE",format:"json"},t))}postNew(e,t={}){return this.request(Object.assign({path:"/api/models/effect/new",method:"POST",query:e,format:"json"},t))}postCopy(e,t={}){return this.request(Object.assign({path:"/api/models/effect/copy",method:"POST",body:e,type:a.z.Json,format:"json"},t))}putSchema(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/schema`,method:"PUT",query:t,format:"json"},n))}putTriggers(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/triggers`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}putConditionTarget(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/conditionTarget`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}putConditionSource(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/conditionSource`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}putAddEffect(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/addEffect/${t}`,method:"PUT",format:"json"},n))}putRemoveEffect(e,t={}){return this.request(Object.assign({path:`/api/models/effect/removeEffect/${e}`,method:"PUT",format:"json"},t))}}},2074:(e,t,n)=>{n.d(t,{s:()=>i});var a=n(1804);class i extends a.e{getAll(e={}){return this.request(Object.assign({path:"/api/models/stats/all",method:"GET",format:"json"},e))}getFiltered(e,t={}){return this.request(Object.assign({path:"/api/models/stats/filtered",method:"GET",body:e,type:a.z.Json,format:"json"},t))}getStats(e,t={}){return this.request(Object.assign({path:`/api/models/stats/${e}`,method:"GET",format:"json"},t))}putStats(e,t,n={}){return this.request(Object.assign({path:`/api/models/stats/${e}`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}deleteStats(e,t={}){return this.request(Object.assign({path:`/api/models/stats/${e}`,method:"DELETE",format:"json"},t))}postStat(e,t={}){return this.request(Object.assign({path:"/api/models/stats/stat",method:"POST",query:e,format:"json"},t))}putBool(e,t,n={}){return this.request(Object.assign({path:`/api/models/stats/${e}/bool`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}putSimple(e,t,n={}){return this.request(Object.assign({path:`/api/models/stats/${e}/simple`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}}},597:(e,t,n)=>{n.r(t),n.d(t,{ModelSelector:()=>$});var a={};n.r(a),n.d(a,{default:()=>k,dependencies:()=>S,name:()=>x,register:()=>T,template:()=>w});var i=n(655),s=n(1542),o=n(3379),d=n.n(o),r=n(7795),l=n.n(r),c=n(569),p=n.n(c),g=n(3565),h=n.n(g),b=n(9216),m=n.n(b),f=n(4589),u=n.n(f),v=n(7922),y={};y.styleTagTransform=u(),y.setAttributes=h(),y.insert=p().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=m(),d()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;const x="model-selector",w='\n<input type="string" value.bind="filter" keyup.trigger="search()" placeholder="search.." />\n\n<div class="schemalist" if.bind="schemas">\n\n  <div class="schema" repeat.for="schema of filteredSchemas" click.trigger="clickModel(schema)" data-bs-dismiss="modal">\n    <h6>${schema.name}</h6>\n    <div if.bind="len(schema) > 0">\n      <div repeat.for="prop of props(schema)">\n        ${schema.properties[prop]} ${prop}\n      </div>\n    </div>\n  </div>\n\n</div>\n\n',k=w,S=[];let E;function T(e){E||(E=s.b_N.define({name:x,template:w,dependencies:S})),e.register(E)}var C=n(5746);n(1932);let $=class{constructor(){this.onselectcallback=e=>{},this.filter="",this.filteredSchemas=[]}binding(){this.search()}len(e){return Object.keys(e.properties).length}strin(e){return JSON.stringify(e.properties)}props(e){return Object.keys(e.properties).filter((e=>!C.lg.ignoredProperties.includes(e)))}search(){let e=this.filter;e?(e=e.toLowerCase(),this.filteredSchemas=this.schemas.filter((t=>!!t.name.toLowerCase().includes(e)||!!this.props(t).some((t=>t.toLowerCase().includes(e)))||!!this.props(t).some((n=>t.properties[n].toLowerCase().includes(e)))||void 0))):this.filteredSchemas=this.schemas}clickModel(e){this.onselectcallback(e)}};(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Array)],$.prototype,"schemas",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],$.prototype,"onselectcallback",void 0),$=(0,i.gn)([(0,s.MoW)(a),(0,i.w6)("design:paramtypes",[])],$)},7497:(e,t,n)=>{n.r(t),n.d(t,{Condition:()=>M});var a={};n.r(a),n.d(a,{default:()=>T,dependencies:()=>C,name:()=>S,register:()=>O,template:()=>E});var i=n(655),s=n(1542),o=n(3379),d=n.n(o),r=n(7795),l=n.n(r),c=n(569),p=n.n(c),g=n(3565),h=n.n(g),b=n(9216),m=n.n(b),f=n(4589),u=n.n(f),v=n(9376),y={};y.styleTagTransform=u(),y.setAttributes=h(),y.insert=p().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=m(),d()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;var x=n(1478),w=n(3028),k=n(597);const S="condition",E='\n\n\n\n<template if.bind="model">\n  <button class="btn btn-floating">Change Type</button>\n  <button class="btn btn-floating">Delete</button>\n\n  \x3c!-- Actor Type: Wether the condition applies to the caster or the target --\x3e\n  <div>\n    Actor:\n    <select value.bind="model.actorType" change.trigger="save()">\n      <option repeat.for="e of Enums.actorTypes" model.bind="$index">${e}</option>\n    </select>\n  </div>\n\n  \x3c!-- Comparator Type: EQ, NE, GT, GE, LT, LE --\x3e\n  <div>\n    Comparator:\n    <select value.bind="model.comparator" change.trigger="save()">\n      <option repeat.for="e of Enums.comparatorTypes" model.bind="$index">${e}</option>\n    </select>\n  </div>\n\n  \x3c!-- schema properties --\x3e\n  ${schema.name} schema:\n  <propertygrid data.bind="model" schema.bind="schema" uid.bind="model.entityUid" callbacksave.bind="() => onSave()">\n    \x3c!-- <div if.bind="modelName == \'GroupCondition\'"> --\x3e\n    \x3c!-- Remove this condition from its parent --\x3e\n    \x3c!-- <button if.bind="depth > 0">-</button> --\x3e\n    \x3c!-- Group Type: AND / OR --\x3e\n    \x3c!-- <select>\n                <option></option>\n            </select> --\x3e\n    \x3c!-- Add Child --\x3e\n    \x3c!-- <button>+</button> --\x3e\n    \x3c!-- Children --\x3e\n    \x3c!-- <condition repeat.for="child of children" model.bind="child" depth.bind="depth+1"></condition> --\x3e\n    \x3c!-- </div> --\x3e\n  </propertygrid>\n\n</template>\n\n<template else>\n  hi\n  <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#conditionSchemaTypeModal-${parent.entityUid}-${parentPropertyName}">Set</button>\n  <modal id="conditionSchemaTypeModal-${parent.entityUid}-${parentPropertyName}" header="Add Condition" close.bind=false footer.bind=false>\n    <model-selector schemas.bind="schemas" onselectcallback.bind="e => create(e)"></model-selector>\n  </modal>\n</template>\n',T=E,C=[x,w,k];let $;function O(e){$||($=s.b_N.define({name:S,template:E,dependencies:C})),e.register($)}var j=n(1804);class z extends j.e{postNew(e,t={}){return this.request(Object.assign({path:"/api/models/condition/new",method:"POST",query:e,format:"json"},t))}}var U=n(5746);n(1932);let M=class{constructor(e){this.conditionController=e,this.Enums=U.Yb,this.callbacksave=()=>{},this.schemas=U.lg.conditions}get modelName(){return this.model.conditionType.name}get schema(){return U.lg.conditions.find((e=>e.name==this.modelName))}create(e){this.conditionController.postNew({schemaName:e.name}).then((e=>this.model=e.data)).then((e=>this.parent[this.parentPropertyName]=this.model)).then((e=>this.save()))}save(){this.callbacksave()}};(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],M.prototype,"parent",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",String)],M.prototype,"parentPropertyName",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],M.prototype,"model",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],M.prototype,"callbacksave",void 0),M=(0,i.gn)([(0,s.MoW)(a),(0,i.w6)("design:paramtypes",[z])],M)},5579:(e,t,n)=>{n.r(t),n.d(t,{Effect:()=>se});var a={};n.r(a),n.d(a,{default:()=>J,dependencies:()=>Z,name:()=>M,register:()=>I,template:()=>N});var i={};n.r(i),n.d(i,{Trigger:()=>F});var s={};n.r(s),n.d(s,{default:()=>V,dependencies:()=>R,name:()=>B,register:()=>G,template:()=>L});var o={};n.r(o),n.d(o,{TriggerList:()=>_});var d={};n.r(d),n.d(d,{default:()=>K,dependencies:()=>Q,name:()=>H,register:()=>ee,template:()=>Y});var r=n(655),l=n(1542),c=n(3379),p=n.n(c),g=n(7795),h=n.n(g),b=n(569),m=n.n(b),f=n(3565),u=n.n(f),v=n(9216),y=n.n(v),x=n(4589),w=n.n(x),k=n(4370),S={};S.styleTagTransform=w(),S.setAttributes=u(),S.insert=m().bind(null,"head"),S.domAPI=h(),S.insertStyleElement=y(),p()(k.Z,S),k.Z&&k.Z.locals&&k.Z.locals;var E=n(3028),T=n(1478),C=n(5041),$=n(8142),O=n(4147),j={};j.styleTagTransform=w(),j.setAttributes=u(),j.insert=m().bind(null,"head"),j.domAPI=h(),j.insertStyleElement=y(),p()(O.Z,j),O.Z&&O.Z.locals&&O.Z.locals;var z=n(7497),U=n(597);const M="trigger",N='\n\n\n\n\n\n\x3c!-- Triggerer Zone --\x3e\n<div class="eblock" style="margin-right: 15px;">\n  <h6 class="clickable" data-bs-toggle="collapse" data-bs-target="#collapseZone-${model.entityUid}">Triggerer Zone</h6>\n  <zone if.bind="model.zone" zone.bind="model.triggerZone" uid.bind="model.entityUid" callbacksave.bind="() => onSave()"></zone>\n  <button else class="btn btn-floating">Set</button>\n</div>\n\n\x3c!-- Conditions --\x3e\n<div>\n  <h6>Triggerer Filter</h6>\n  <condition parent.bind="model" parentPropertyName.bind="triggererFilter" model.bind="model.triggererFilter" callbacksave.bind="() => save()"></condition>\n  <h6>Holder Condition</h6>\n  <condition parent.bind="model" parentPropertyName.bind="holderCondition" model.bind="model.holderCondition" callbacksave.bind="() => save()"></condition>\n</div>\n\n\x3c!-- Trigger OrderType --\x3e\n<div>\n  <h6>OrderType</h6>\n  <select value.bind="model.triggerOrderType" change.trigger="() => save()">\n    <option repeat.for="e of Enums.triggerOrderTypes" model.bind="$index">${e}</option>\n  </select>\n</div>\n\n\x3c!-- Trigger Type --\x3e\n<div class="eblock" style="flex-grow: 1;">\n  <h6>${model.schema.triggerType.name} schema</h6>\n\n  \x3c!-- Delete --\x3e\n  <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#triggerDeleteModal-${model.entityUid}">Delete</button>\n  <modal id="triggerDeleteModal-${model.entityUid}" header="Delete Trigger" callbackok.bind="() => delete()">\n    Are you sure you want to delete ${model.schema.triggerType.name} ${model.entityUid}\n  </modal>\n\n  \x3c!-- Change type --\x3e\n  <button class="btn btn-floating btn-changeSchema" data-bs-toggle="modal" data-bs-target="#triggerChangeTypeModal-${model.entityUid}">Change type</button>\n  <modal id="triggerChangeTypeModal-${model.entityUid}" header="Change Trigger schema type" footer.bind=false>\n    <model-selector schemas.bind="schemas" onselectcallback.bind="e => onChangeSchemaType(e)"></model-selector>\n  </modal>\n\n  \x3c!-- Properties --\x3e\n  <propertygrid data.bind="model.schema" schema.bind="schema" uid.bind="model.entityUid" callbacksave.bind="() => save()"></propertygrid>\n</div>\n',J=N,Z=[z,T,E,C,U];let A;function I(e){A||(A=l.b_N.define({name:M,template:N,dependencies:Z})),e.register(A)}var P=n(5746),D=n(1804);class q extends D.e{postNew(e,t={}){return this.request(Object.assign({path:"/api/models/trigger/new",method:"POST",query:e,format:"json"},t))}deleteTrigger(e,t,n={}){return this.request(Object.assign({path:`/api/models/trigger/${e}/${t}`,method:"DELETE"},n))}putSchema(e,t,n,a={}){return this.request(Object.assign({path:`/api/models/trigger/${e}/${t}/schema`,method:"PUT",query:n,format:"json"},a))}}n(1932);let F=class{constructor(e){this.triggerController=e,this.Enums=P.Yb,this.schemas=P.lg.triggers}binding(){}get schema(){return P.lg.triggers.find((e=>e.name==this.model.schema.triggerType.name))}onChangeSchemaType(e){this.callbackchange(e)}delete(){this.callbackdelete()}save(){console.log("trigger save"),this.callbacksave()}};(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Object)],F.prototype,"model",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Function)],F.prototype,"callbacksave",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Function)],F.prototype,"callbackdelete",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Function)],F.prototype,"callbackchange",void 0),F=(0,r.gn)([(0,l.MoW)(a),(0,r.w6)("design:paramtypes",[q])],F);const B="trigger-list",L='\n\n\n\n\x3c!-- <button class="btn btn-floating" click.trigger="clickAddTrigger()">+</button> --\x3e\n<button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#triggerAddModal-${modaluid}">+</button>\n<modal id="triggerAddModal-${modaluid}" header="Add Trigger" close.bind=false footer.bind=false>\n  <model-selector schemas.bind="schemas" onselectcallback.bind="e => onAddTrigger(e)"></model-selector>\n</modal>\n\n<button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#triggerModalClearList-${modaluid}">Clear</button>\n<modal id="triggerModalClearList-${modaluid}" header="Clear trigger list" close.bind=false callbackok.bind="() => clearList()"></modal>\n\n\n<div repeat.for="trigger of effect.triggers">\n    <button class="btn btn-outline mb-1" data-bs-toggle="modal" data-bs-target="#triggerEditorModal-${trigger.entityUid}">${trigger.schema.triggerType.name}</button>\n    <modal id="triggerEditorModal-${trigger.entityUid}" header="Edit Trigger ${trigger.entityUid}" close.bind=true footer.bind=false buttons.bind=false>\n        <trigger model.bind="trigger" callbacksave.bind="() => save()" callbackdelete.bind="() => onDelete(trigger)" callbackchange.bind="(e) => onChangeType(trigger, e)"></trigger>\n    </modal>\n</div>\n',V=L,R=[T,i,U];let W;function G(e){W||(W=l.b_N.define({name:B,template:L,dependencies:R})),e.register(W)}let _=class{constructor(e){this.triggerController=e,this.schemas=P.lg.triggers}get modaluid(){return this.effect.entityUid}binding(){}printList(){console.log("Triggers for effect "+this.effect.entityUid+" : "),console.log(this.effect.triggers)}onAddTrigger(e){console.log("On add trigger to effect "+this.effect.entityUid),this.triggerController.postNew({schemaName:e.name}).then((e=>this.effect.triggers.push(e.data))).then((e=>this.callbacksave()))}clearList(){this.effect.triggers=[],this.callbacksave()}onDelete(e){let t=this.effect.triggers.indexOf(e);this.effect.triggers.splice(t,1),this.save()}onChangeType(e,t){this.triggerController.putSchema(this.effect.entityUid,e.entityUid,{schemaName:t.name}).then((e=>this.save()))}save(){this.callbacksave()}};(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Function)],_.prototype,"callbacksave",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Object)],_.prototype,"effect",void 0),_=(0,r.gn)([(0,l.MoW)(s),(0,r.w6)("design:paramtypes",[q])],_);const H="effect",Y='\n\n\n\n\n\n\n\n\x3c!-- drag.trigger="e => onDrag(e)"  --\x3e\n<div if.bind="model">\n\n  <div class="effecttitle">\n    \x3c!-- Title --\x3e\n    <div class="effecttitletitle clickable" data-bs-toggle="collapse" data-bs-target="#collapseEffectContent-${model.entityUid}">\n      <h5 click.trigger="clickMinimize()">${modelName}</h5>\n      <h5 click.trigger="clickMinimize()">${model.entityUid}</h5>\n    </div>\n    <button class="btn btn-floating" click.trigger="clickCopy()"><i class="fa-regular fa-copy"></i></button>\n    <button class="btn btn-floating" click.trigger="clickPaste()"><i class="fa-regular fa-clipboard"></i></button>\n    <button class="btn btn-floating" click.trigger="clickMoveUp()"><i class="fa-solid fa-angle-up"></i></button>\n    <button class="btn btn-floating" click.trigger="clickMoveDown()"><i class="fa-solid fa-angle-down"></i></button>\n    \x3c!-- delete & confirm --\x3e\n    <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#removeEffectModal-${model.entityUid}"><i class="fa-solid fa-xmark"></i></button>\n    <modal id="removeEffectModal-${model.entityUid}" header="Remove effect?" close.bind=false footer.bind=true callbackok.bind="() => clickRemove()">\n      Confirm remove ${modelName}?\n    </modal>\n\n  </div>\n\n  \x3c!-- Content --\x3e\n  <div class="collapse show" id="collapseEffectContent-${model.entityUid}" if.bind="model">\n\n    \x3c!-- Properties section --\x3e\n    <div class="effectSection d-flex">\n      <div class="eblock">\n        <h6 class="clickable" data-bs-toggle="collapse" data-bs-target="#collapseZone-${model.entityUid}">Zone</h6>\n        <zone zone.bind="model.targetAcquisitionZone" uid.bind="model.entityUid" callbacksave.bind="() => onSave()"></zone>\n      </div>\n\n      \x3c!-- Conditions --\x3e\n      <div>\n        <h6>Target Filter</h6>\n        <condition if.bind="model.targetFilter" model.bind="model.targetFilter" callbacksave.bind="() => save()"></condition>\n        <button else class="btn btn-floating">Set</button>\n        <h6>Source Condition</h6>\n        <condition if.bind="model.sourceCondition" model.bind="model.sourceCondition" callbacksave.bind="() => save()"></condition>\n        <button else class="btn btn-floating">Set</button>\n        <condition></condition>\n        <h6>Triggers</h6>\n        <trigger-list effect.bind="model" callbacksave.bind="() => saveTriggerList()"></trigger-list>\n      </div>\n\n      \x3c!-- Schema --\x3e\n      <div class="eblock" style="flex-grow: 1;">\n        <h6>Schema</h6>\n        \x3c!-- change type --\x3e\n        <button class="btn btn-floating btn-changeSchema" data-bs-toggle="modal" data-bs-target="#effectSchemaTypeModal-${model.entityUid}">\n          Change type\n        </button>\n        <modal id="effectSchemaTypeModal-${model.entityUid}" header="Change Schema Type" close.bind=false footer.bind=false>\n          <model-selector schemas.bind="schemas" onselectcallback.bind="e => onChangeSchemaType(e)"></model-selector>\n        </modal>\n        \x3c!-- schema properties --\x3e\n        <propertygrid data.bind="model.schema" schema.bind="schema" uid.bind="model.entityUid" callbacksave.bind="() => onSave()"></propertygrid>\n      </div>\n    </div>\n\n    \x3c!-- Status Effects --\x3e\n    <effectlist if.bind="hasStatusEffects" effectids.bind="model.schema.effectIds" modaluid.bind="model.entityUid + \'status\'" callbacksave.bind="() => onSave()" title="Status Effects"></effectlist>\n    \x3c!-- Children Effects --\x3e\n    <effectlist if.bind="model.effectIds" effectids.bind="model.effectIds" modaluid.bind="model.entityUid" callbacksave.bind="() => onSave()"></effectlist>\n\n  </div>\n\n</div>\n\n\x3c!-- modelUid --\x3e\n\x3c!-- model name --\x3e\n\x3c!-- model desc --\x3e\n\x3c!-- model BoardTargetType --\x3e\n\x3c!-- model propertySchemaType => property names --\x3e\n\n\x3c!-- zone --\x3e\n\x3c!-- conditions target --\x3e\n\x3c!-- conditions caster --\x3e\n\x3c!-- triggers --\x3e\n',K=Y,Q=[E,T,C,$,i,o,U];let X;function ee(e){X||(X=l.b_N.define({name:H,template:Y,dependencies:Q})),e.register(X)}var te=n(5367),ne=n(9344),ae=n(8702),ie=n(5599);let se=class{constructor(e,t){this.ea=e,this.effectController=t,this.callbackmoveup=e=>{},this.callbackmovedown=e=>{},this.callbackremove=e=>{},this.minimized=!1,this.schemas=P.lg.effects}binding(){this.effectController.getEffect(this.uid).then((e=>{this.model=e.data}),(e=>{console.log(e)}))}get modelName(){let e=+this.model.modelUid;return te.JN[e].toString()}get schema(){return P.lg.effects.find((e=>e.name==this.modelName))}get hasStatusEffects(){return"effectIds"in this.model.schema}clickMinimize(){this.minimized=!this.minimized}clickMoveUp(){this.callbackmoveup(this.model)}clickMoveDown(){this.callbackmovedown(this.model)}clickRemove(){this.callbackremove(this.model)}clickCopy(){navigator.clipboard.writeText(JSON.stringify(this.model)),ie.FN.create({title:"Effect",message:"Copied",status:ie.vM.INFO,timeout:1e3})}async clickPaste(){let e=await navigator.clipboard.readText(),t=JSON.parse(e);this.effectController.putEffect(this.model.entityUid,t).then((e=>this.model=e.data)).then((e=>this.handleSuccess(e)),(e=>this.handleFailure(e)))}onChangeSchemaType(e){this.effectController.putSchema(this.model.entityUid,{schemaName:e.name}).then((e=>this.model=e.data)).then((e=>this.handleSuccess(e)),(e=>this.handleFailure(e)))}saveTriggerList(){this.effectController.putTriggers(this.model.entityUid,this.model.triggers).then((e=>this.handleSuccess(e)),(e=>this.handleFailure(e)))}onSave(){console.log("effect save "+this.model.entityUid),this.effectController.putEffect(this.model.entityUid,this.model).then((e=>{this.model=e.data,this.handleSuccess(e)}),this.handleFailure)}handleSuccess(e){this.ea.publish("operation:saved")}handleFailure(e){this.ea.publish("operation:failed")}};(0,r.gn)([l.ExJ,(0,r.w6)("design:type",String)],se.prototype,"uid",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Object)],se.prototype,"callbackmoveup",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Object)],se.prototype,"callbackmovedown",void 0),(0,r.gn)([l.ExJ,(0,r.w6)("design:type",Object)],se.prototype,"callbackremove",void 0),se=(0,r.gn)([(0,l.MoW)(d),(0,ne.f3)(ne.Rp,ae.Z),(0,r.w6)("design:paramtypes",[Object,ae.Z])],se)},8142:(e,t,n)=>{n.r(t),n.d(t,{Effectlist:()=>y});var a={};n.r(a),n.d(a,{default:()=>p,dependencies:()=>g,name:()=>l,register:()=>b,template:()=>c});var i=n(655),s=n(1542),o=n(1478),d=n(5579),r=n(597);const l="effectlist",c='\n\n\n\n\n\x3c!-- Children section --\x3e\n<div class="effectSection" if.bind="effectids">\n\n  \x3c!-- Title --\x3e\n  <h6 class="clickable" data-bs-toggle="collapse" data-bs-target="#collapseEffects-${modaluid}">\n    ${title} (${effectids.length})\n  </h6>\n\n  \x3c!-- Add --\x3e\n  <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#effectChildModal-${modaluid}">+</button>\n  \x3c!-- Paste --\x3e\n  <button class="btn btn-floating tooltip" click.trigger="clickPasteNewEffect()">\n    <i class="fa-regular fa-clipboard"></i>\n    <span class="tooltiptext">Tooltip text</span>\n  </button>\n\n  \x3c!-- Modal model selector --\x3e\n  <modal id="effectChildModal-${modaluid}" header="Add Effect Child" close.bind=false footer.bind=false>\n    <model-selector schemas.bind="schemas" onselectcallback.bind="e => onAddChild(e)"></model-selector>\n  </modal>\n\n  \x3c!-- Collapse --\x3e\n  <div class="effectlist collapse show" id="collapseEffects-${modaluid}">\n    \x3c!-- Effect List --\x3e\n    <effect id.bind="effectid" repeat.for="effectid of effectids" uid.bind="effectid" \n        draggable="true" drop.trigger="e => onDrop(e, effectid)" \n        dragstart.trigger="e => onDrag(e, effectid)" dragover.trigger="e => onDragOver(e, effectid)"\n        callbackmoveup.bind="e => onMoveEffectUp(e)" \n        callbackmovedown.bind="e => onMoveEffectDown(e)" \n        callbackremove.bind="e => onRemoveEffect(e)"\n    ></effect>\n  </div>\n\n</div>\n',p=c,g=[o,d,r];let h;function b(e){h||(h=s.b_N.define({name:l,template:c,dependencies:g})),e.register(h)}var m=n(9344),f=n(8702),u=n(9561),v=n(5746);n(1932);let y=class{constructor(e,t,n){this.ea=e,this.router=t,this.effectController=n,this.title="Effects",this.effectids=[],this.modaluid="",this.callbacksave=()=>{},this.schemas=v.lg.effects}binding(){}save(){this.callbacksave()}async onAddChild(e){this.effectController.postNew({schemaName:e.name}).then((e=>this.effectids.push(e.data.entityUid))).then((e=>this.save()))}async clickPasteNewEffect(){let e=await navigator.clipboard.readText(),t=JSON.parse(e);this.effectController.postCopy(t).then((e=>this.effectids.push(e.data.entityUid))).then((e=>this.save()))}onMoveEffectUp(e){let t=this.effectids.indexOf(e.entityUid);-1!=t?(this.effectids.splice(t,1),this.effectids.splice(t-1,0,e.entityUid),this.save()):console.error("effect list.moveEffectUp: effect not found: "+JSON.stringify(e))}onMoveEffectDown(e){let t=this.effectids.indexOf(e.entityUid);console.log("effect ids: "+t+", "+JSON.stringify(this.effectids)),-1!=t?(this.effectids.splice(t,1),this.effectids.splice(t+1,0,e.entityUid),this.save()):console.error("effect list.moveEffectDown: effect not found: "+JSON.stringify(e))}onRemoveEffect(e){console.log("effect list remove eff: "+e.entityUid);let t=this.effectids.indexOf(e.entityUid);this.effectids.splice(t,1),this.save()}};(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],y.prototype,"title",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],y.prototype,"effectids",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],y.prototype,"modaluid",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],y.prototype,"callbacksave",void 0),y=(0,i.gn)([(0,s.MoW)(a),(0,m.f3)(m.Rp,u.v5,f.Z),(0,i.w6)("design:paramtypes",[Object,Object,f.Z])],y)},3028:(e,t,n)=>{n.r(t),n.d(t,{default:()=>M});var a={};n.r(a),n.d(a,{default:()=>C,dependencies:()=>$,name:()=>E,register:()=>j,template:()=>T});var i=n(655),s=n(1542),o=n(3379),d=n.n(o),r=n(7795),l=n.n(r),c=n(569),p=n.n(c),g=n(3565),h=n.n(g),b=n(9216),m=n.n(b),f=n(4589),u=n.n(f),v=n(2682),y={};y.styleTagTransform=u(),y.setAttributes=h(),y.insert=p().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=m(),d()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;var x=n(5041),w=n(5142),k=n(9990),S=n(9841);const E="propertygrid",T='\n\n\n\n\n<div if.bind="data && schema">\n  \x3c!-- hi prop grid --\x3e\n\n  <table>\n    <tbody>\n      <tr class="property" repeat.for="prop of keys">\n        <td style="padding-right: 8px; color: var(--accent2);" data-bs-toggle="collapse" data-bs-target="#collapseZone-${uid}-schema">\n          ${prop}: \n          ${propName(prop)}\n          \x3c!-- , ${typeof(data[prop])} --\x3e\n        </td>\n        <td>\n          <template switch.bind="propName(prop)">\n\n            <div case=\'IEntityList`1\'>Status effect list is below. Counter: ${data[prop].length}</div>\n      \n            <zone uid="${uid}-schema" case="IZone" zone.bind="data[prop]" callbacksave.bind="() => onChange()"></zone>\n      \n            <select case=\'ElementType\' value.bind="data[prop]" change.trigger="onChange()">\n              <option repeat.for="e of Enums.elements" model.bind="$index">${e}</option>\n            </select>\n            <select case=\'ActorType\' value.bind="data[prop]" change.trigger="onChange()">\n              <option repeat.for="e of Enums.actorTypes" model.bind="$index">${e}</option>\n            </select>\n            <select case=\'MomentType\' value.bind="data[prop]" change.trigger="onChange()">\n              <option repeat.for="e of Enums.momentTypes" model.bind="$index">${e}</option>\n            </select>\n      \n            <statsmini case="IStats"           stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.allSectioned"></statsmini>\n            <statsmini case="CreatureStats"    stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.creaturesSectioned"></statsmini>\n            <statsmini case="StatusModelStats" stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.statusModels"></statsmini>\n            <statsmini case="SpellModelStats"  stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.spellModels"></statsmini>\n            <statsmini case="SpellStats"       stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.spells"></statsmini>\n\n\n            \x3c!-- stat : select charac id + value --\x3e\n            \x3c!-- charac id selector --\x3e\n            \x3c!-- iid selector:  string, creature(summon), spell, status, animation, scene/model asset  --\x3e\n            <input case="StringIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="CreatureIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="SpellIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="StatusIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="AssetIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="AnimationSetIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n      \n            <template default-case switch.bind="type(prop)">\n              \x3c!-- <input case="Int32" type="number" value.bind="data[prop]"  change.trigger="onChange()"/> --\x3e\n              <input case="number" type="number" value.bind="data[prop]"  change.trigger="onChange()"/>\n              \x3c!-- <div case="string"> --\x3e\n                \x3c!-- who even has a string property --\x3e\n                \x3c!-- and more like a string selector than a string component --\x3e\n                \x3c!-- stringcomponent (StringEntity?) --\x3e\n              \x3c!-- </div> --\x3e\n              <div case="boolean">\n                {bool}\n                \x3c!-- toggle button --\x3e\n                  <div style="margin: 5px;">\n                      <input type="checkbox" class="btn-check" id="btn-check-outlined ${prop}" autocomplete="off" checked.bind="data[prop]" change.trigger="onChange()">\n                      \x3c!-- change.trigger="onChangeBase" --\x3e\n                      <label class="btn btn-outline shadow-none" for="btn-check-outlined ${prop}">${characName}</label><br>\n                  </div>\n              </div>\n            </template>\n\n          </template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n</div>\n',C=T,$=[x,w,k,S];let O;function j(e){O||(O=s.b_N.define({name:E,template:T,dependencies:$})),e.register(O)}var z=n(5746);n(1932);let U=class{constructor(){this.Enums=z.Yb,this.Characteristics=z.Mt,this.callbacksave=()=>{}}binding(){}get keys(){return Object.keys(this.data).filter((e=>!z.lg.ignoredProperties.includes(e)))}get values(){return Object.values(this.data)}type(e){return typeof this.data[e]}propName(e){return this.schema.properties[e]}onChange(){this.callbacksave()}};(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],U.prototype,"data",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],U.prototype,"schema",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",String)],U.prototype,"uid",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],U.prototype,"callbacksave",void 0),U=(0,i.gn)([(0,s.MoW)(a),(0,i.w6)("design:paramtypes",[])],U);const M=U},9841:(e,t,n)=>{n.r(t),n.d(t,{Statpropertyselector:()=>b});var a={};n.r(a),n.d(a,{default:()=>r,dependencies:()=>l,name:()=>o,register:()=>p,template:()=>d});var i=n(655),s=n(1542);const o="statpropertyselector",d='\n\n\x3c!-- <input type="string" value.bind="filter" keyup.trigger="search()" placeholder="search.." /> --\x3e\n\n<div repeat.for="type of sections" if.bind="characs">\n    \x3c!-- ${type} --\x3e\n    <h6>${getSectionName(type)}</h6>\n    <div class="schemalist">\n      <div class="btn btn-outline" style="margin: 5px;" repeat.for="property of type" click.trigger="clickCharacteristic(property)" data-bs-dismiss="modal">\n          ${property.baseName}: ${getValueType(property)}\n      </div>\n    </div>\n</div>\n\n\x3c!-- resources --\x3e\n\x3c!-- affinities --\x3e\n\x3c!-- resistances --\x3e\n\x3c!-- other --\x3e\n\x3c!-- state --\x3e\n\n\x3c!-- contextuals --\x3e\n\x3c!-- statuscontainer --\x3e\n\x3c!-- statusinstance --\x3e\n\x3c!-- spellmodel --\x3e\n\x3c!-- spell --\x3e\n',r=d,l=[];let c;function p(e){c||(c=s.b_N.define({name:o,template:d,dependencies:l})),e.register(c)}var g=n(5746),h=n(5367);n(1932);let b=class{constructor(){this.Characteristics=g.Mt,this.characs=g.Mt.allSectioned,this.callbackselect=e=>{}}binding(){}hasMultipleSections(){return!!this.characs&&Array.isArray(this.characs[0])}get sections(){return this.hasMultipleSections()?this.characs:[this.characs]}clickCharacteristic(e){this.callbackselect(e)}search(){}getSectionName(e){return e[0].nameModelUid.split(".")[1]}getValueType(e){let t=e.statValueType;return h.$t[t]}};(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Array)],b.prototype,"characs",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],b.prototype,"callbackselect",void 0),b=(0,i.gn)([(0,s.MoW)(a),(0,i.w6)("design:paramtypes",[])],b)},9990:(e,t,n)=>{n.r(t),n.d(t,{Statsmini:()=>L});var a={};n.r(a),n.d(a,{default:()=>C,dependencies:()=>$,name:()=>E,register:()=>j,template:()=>T});var i={};n.r(i),n.d(i,{StatsMiniRow:()=>N});var s={};n.r(s),n.d(s,{default:()=>I,dependencies:()=>P,name:()=>Z,register:()=>q,template:()=>A});var o=n(655),d=n(1542),r=n(3379),l=n.n(r),c=n(7795),p=n.n(c),g=n(569),h=n.n(g),b=n(3565),m=n.n(b),f=n(9216),u=n.n(f),v=n(4589),y=n.n(v),x=n(7562),w={};w.styleTagTransform=y(),w.setAttributes=m(),w.insert=h().bind(null,"head"),w.domAPI=p(),w.insertStyleElement=u(),l()(x.Z,w),x.Z&&x.Z.locals&&x.Z.locals;var k=n(9841),S=n(1478);const E="statsminirow",T='<td>${getCharacName()}</td>\n\n<td if.bind="isSimple()">\n  <input type="number" value.bind="getBase().value" change.trigger="onChangeStatValue" />\n</td>\n<td if.bind="isSimple() && hasgrowth">\n  (growth)\n</td>\n\n\n<td if.bind="isBool()">\n  <input type="checkbox" class="btn-check" id="btn-check-outlined ${statId}" autocomplete="off" checked.bind="getBase().value" change.trigger="onChangeStatValue">\n  <label class="btn btn-outline shadow-none" for="btn-check-outlined ${statId}">${getBase().value ? \'True\' : \'False\'}</label><br>\n</td>\n<td if.bind="isBool() && hasgrowth">\n  (growth)\n</td>\n\n\n<td if.bind="isEnum()">\n  <template switch.bind="getEnum()">\n    <select case=\'StatusMergeStrategy\' value.bind="getBase().value" change.trigger="onChangeStatValue">\n      <option repeat.for="val of Enums.statusMergeStrategies" model.bind="$index">${val}</option>\n    </select>\n    <select case=\'StatusUnbewitchStrategy\' value.bind="getBase().value" change.trigger="onChangeStatValue">\n      <option repeat.for="val of Enums.statusUnbewitchStrategies" model.bind="$index">${val}</option>\n    </select>\n  </template>\n</td>\n<td if.bind="isEnum() && hasgrowth">\n  (growth)\n</td>\n\n<td if.bind="hasadddelete">\n  <button class="btn btn-outline btn-icon" click.trigger="clickRemoveStat()">x</button>\n</td>\n',C=T,$=[];let O;function j(e){O||(O=d.b_N.define({name:E,template:T,dependencies:$})),e.register(O)}var z=n(9344),U=n(5746),M=n(5367);n(1932);let N=class{constructor(){this.Enums=U.Yb,this.Characteristics=U.Mt,this.callbacksavestat=()=>{},this.callbackdeletestat=e=>{}}binding(){}get statId(){return this.statid}getBase(){return this.base}getGrowth(){return this.growth}getCharacName(){return U.Mt.getCharac(this.statId).baseName}getCharacType(){return U.Mt.getCharac(this.statId)}isSimple(){let e=this.getCharacType();return e.statValueType==M.$t.Simple&&null==e.enumValueConstraint}isBool(){return this.getCharacType().statValueType==M.$t.Bool}isEnum(){let e=this.getCharacType();return e.statValueType==M.$t.Simple&&null!=e.enumValueConstraint}getEnum(){let e=this.getCharacType();if(!e.enumValueConstraint)return"";let t=e.enumValueConstraint.split(",")[0].split(".");return t[t.length-1].trim()}onChangeStatValue(){this.save()}clickRemoveStat(e){this.callbackdeletestat(e),this.save()}save(){this.callbacksavestat()}};(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Boolean)],N.prototype,"hasadddelete",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Boolean)],N.prototype,"hasgrowth",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",String)],N.prototype,"statid",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"base",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"growth",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"callbacksavestat",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"callbackdeletestat",void 0),N=(0,o.gn)([(0,d.MoW)(a),(0,z.f3)(),(0,o.w6)("design:paramtypes",[])],N);var J=n(597);const Z="statsmini",A='\n\n\n\n\n<temaplate if.bind="stats">\n\n\n  <button if.bind="hasadddelete" class="btn btn-outline btn-icon" data-bs-toggle="modal" data-bs-target="#statSelector-${stats.entityUid}-${idsuffix}">+</button>\n\n  <modal if.bind="hasadddelete" id="statSelector-${stats.entityUid}-${idsuffix}" header="Add Stat" close.bind=false footer.bind=false>\n    <statpropertyselector characs.bind="characsallowed" callbackselect.bind="s => onAddStat(s)"></statpropertyselector>\n  </modal>\n\n  <template if.bind="hasSections()">\n    <div repeat.for="section of characsallowed">\n      <h6 if.bind="sectionHasValues(section)">${getSectionName(section)}</h6>\n      <table class="table-striped table-sm table-borderless table-responsive-sm">\n        <tbody>\n          <tr as-element="statsminirow" repeat.for="statid of getFilteredDicKeys(section)" statid.bind="statid" base.bind="getBase(statid)" growth.bind="getGrowth(statid)" \n          hasgrowth.bind="hasgrowth" hasadddelete.bind="hasadddelete" callbacksavestat.bind="() => save()" callbackdeletestat.bind="s => clickRemoveStat(s)"></tr>\n        </tbody>\n      </table>\n    </div>\n  </template>\n\n  <template else>\n    <table class="table-striped table-sm table-borderless table-responsive-sm">\n      <tbody>\n        <tr as-element="statsminirow" repeat.for="statid of getDicKeys" statid.bind="statid" base.bind="getBase(statid)" growth.bind="getGrowth(statid)" \n        hasgrowth.bind="hasgrowth" hasadddelete.bind="hasadddelete" callbacksavestat.bind="() => save()" callbackdeletestat.bind="s => clickRemoveStat(s)"></tr>\n      </tbody>\n    </table>\n  </template>\n\n\n</temaplate>\n',I=A,P=[k,S,i,J];let D;function q(e){D||(D=d.b_N.define({name:Z,template:A,dependencies:P})),e.register(D)}var F=n(944),B=n(2074);let L=class{constructor(e){this.statsController=e,this.Enums=U.Yb,this.idsuffix="",this.characsallowed=U.Mt.allSectioned,this.hasgrowth=!1,this.hasadddelete=!0,this.showall=!1,this.callbacksavestat=()=>{}}binding(){this.statsuid&&!this.stats&&this.statsController.getStats(this.statsuid).then((e=>{this.stats=e.data}),(e=>console.log("no stats error")))}hasSections(){return!!this.characsallowed&&Array.isArray(this.characsallowed[0])}get getDicValues(){return Object.values(this.stats.base.dic)}getFilteredDicKeys(e){var t;let n=Object.keys(null===(t=this.stats)||void 0===t?void 0:t.base.dic).filter((e=>"$type"!=e&&"entityUid"!=e));return Array.isArray(e[0])?this.showall?e.map((e=>e.map((e=>e.id)))):n.filter((t=>e.some((e=>e.some((e=>e.id==t)))))):this.showall?e.map((e=>e.id)):n.filter((t=>e.some((e=>e.id==t))))}get getDicKeys(){return this.stats?this.getFilteredDicKeys(this.characsallowed):null}getBase(e){return this.stats.base.dic[e]}getGrowth(e){return this.stats.growth.dic[e]}getSectionName(e){let t=e[0];return M.xC[t.category]}sectionHasValues(e){return null==e?void 0:e.some((e=>{var t,n,a,i,s,o;return(null===(a=null===(n=null===(t=this.stats)||void 0===t?void 0:t.base)||void 0===n?void 0:n.dic)||void 0===a?void 0:a.hasOwnProperty(e.id))||(null===(o=null===(s=null===(i=this.stats)||void 0===i?void 0:i.growth)||void 0===s?void 0:s.dic)||void 0===o?void 0:o.hasOwnProperty(e.id))}))}onChangeStatValue(){this.save()}clickRemoveStat(e){delete this.stats.base.dic[e],this.save()}onAddStat(e){this.statsController.postStat({characID:e.id}).then((e=>{if(this.stats.base.dic[e.data.statId]=e.data,this.hasgrowth){let t={functions:[{xFromIncluded:U.gT.MAX_INT,xToExcluded:U.gT.MIN_INT,slopes:[0]}]};this.stats.growth.dic[e.data.statId]=t}console.log("Statsmini bubble up callback: "),console.log(this.stats),this.save()}))}save(){this.callbacksavestat(),this.statsuid&&this.statsController.putStats(this.statsuid,this.stats).then((e=>this.stats=e.data))}};(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Object)],L.prototype,"idsuffix",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Array)],L.prototype,"characsallowed",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Boolean)],L.prototype,"hasgrowth",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Boolean)],L.prototype,"hasadddelete",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Boolean)],L.prototype,"showall",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",Object)],L.prototype,"callbacksavestat",void 0),(0,o.gn)([d.ExJ,F.LO,(0,o.w6)("design:type",Object)],L.prototype,"stats",void 0),(0,o.gn)([d.ExJ,(0,o.w6)("design:type",String)],L.prototype,"statsuid",void 0),L=(0,o.gn)([(0,d.MoW)(s),(0,z.f3)(B.s),(0,o.w6)("design:paramtypes",[B.s])],L)},5041:(e,t,n)=>{n.r(t),n.d(t,{Zone:()=>O});var a={};n.r(a),n.d(a,{default:()=>k,dependencies:()=>S,name:()=>x,register:()=>T,template:()=>w});var i=n(655),s=n(1542),o=n(3379),d=n.n(o),r=n(7795),l=n.n(r),c=n(569),p=n.n(c),g=n(3565),h=n.n(g),b=n(9216),m=n.n(b),f=n(4589),u=n.n(f),v=n(545),y={};y.styleTagTransform=u(),y.setAttributes=h(),y.insert=p().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=m(),d()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;const x="zone",w='<table class="effecttable" if.bind="zone">\n  <tbody>\n    <tr>\n      <td>\n        Type\n        \x3c!-- ${zone.zoneType.value} --\x3e\n      </td>\n      <td>\n        <select value.bind="zone.zoneType.value" change.trigger="save()">\n          <option repeat.for="type of Enums.zoneTypes" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n    <tr if.bind="zone.zoneType.value && zone.zoneType.value !== 0">\n      <td>Size</td>\n      <td>\n        <div class="d-flex gap-1">\n          <div class="input-group">\n            <span class="input-group-text" id="basic-addon1">x</span>\n            <input class="input-group-input" type="number" aria-describedby="basic-addon1" value.bind="zone.size.value.x" change.trigger="save()">\n          </div>\n          <div class="input-group collapse" id="collapseZone-${uid}">\n            <span class="input-group-text" id="basic-addon3">r</span>\n            <input class="input-group-input" type="number" aria-describedby="basic-addon3" value.bind="zone.size.value.z" change.trigger="save()">\n          </div>\n          <div if.bind="zoneSizeHasY" class="input-group">\n            <span class="input-group-text" id="basic-addon2">y</span>\n            <input class="input-group-input" type="number" aria-describedby="basic-addon2" value.bind="zone.size.value.y" change.trigger="save()">\n          </div>\n        </div>\n      </td>\n    </tr>\n\n    \x3c!-- <tr class="collapse" id="collapseZone-${uid}"> --\x3e\n    <tr>\n      <td>World Origin</td>\n      <td>\n        <select value.bind="zone.worldOrigin" change.trigger="save()">\n          <option repeat.for="type of Enums.actorTypes" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>World Offset</td>\n      <td>\n        <div class="d-flex gap-1">\n          <input type="number" value.bind="zone.worldOffset.x" change.trigger="save()" />\n          <input type="number" value.bind="zone.worldOffset.z" change.trigger="save()" />\n        </div>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Local Origin</td>\n      <td>\n        <select value.bind="zone.localOrigin" change.trigger="save()">\n          <option repeat.for="type of Enums.direction9" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Rotation</td>\n      <td>\n        <select value.bind="zone.rotation" change.trigger="save()">\n          <option repeat.for="type of Enums.rotation4" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Negative</td>\n      <td>\n        <input type="checkbox" class="btn-check" id="btn-check-outlined isnegative ${uid}" autocomplete="off" checked.bind="zone.negative" change.trigger="onChangeStatValue">\n        <label class="btn btn-outline shadow-none" for="btn-check-outlined isnegative ${uid}">${zone.negative ? \'True\' : \'False\'}</label><br>\n        \x3c!-- <select value.bind="zone.rotation" change.trigger="save()">\n          <option repeat.for="type of Enums.rotation4" model.bind="$index">${type}</option>\n        </select> --\x3e\n      </td>\n    </tr>\n    \n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Sampling Count</td>\n      <td>\n        <input type="number" value.bind="zone.maxSampleCount" change.trigger="save()" />\n      </td>\n    </tr>\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Sampling</td>\n      <td>\n        <select value.bind="zone.samplingType" change.trigger="save()">\n          <option repeat.for="type of Enums.samplingTypes" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n    \n\x3c!-- \n  TODO: \n  - bool negative,  \n  - bool canRotate,\n  - list<zone> children\n--\x3e\n\n  </tbody>\n</table>\n',k=w,S=[];let E;function T(e){E||(E=s.b_N.define({name:x,template:w,dependencies:S})),e.register(E)}var C=n(5367),$=n(5746);n(1932);let O=class{constructor(){this.Enums=$.Yb,this.zones2d=[C.Ak.cross,C.Ak.xcross,C.Ak.star,C.Ak.crossHalf,C.Ak.xcrossHalf,C.Ak.rectangle,C.Ak.ellipse,C.Ak.ellipseHalf],this.callbacksave=()=>{},this.minimized=!0}bound(){}get zoneSizeHasY(){return this.zones2d.includes(this.zone.zoneType.value)}get zoneSizeHasZ(){return!0}save(){console.log("Zone save"),this.callbacksave()}clickMinimize(){this.minimized=!this.minimized}};(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],O.prototype,"zone",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",String)],O.prototype,"uid",void 0),(0,i.gn)([s.ExJ,(0,i.w6)("design:type",Object)],O.prototype,"callbacksave",void 0),O=(0,i.gn)([(0,s.MoW)(Object.assign(Object.assign({},a),{name:"zone"}))],O)}}]);