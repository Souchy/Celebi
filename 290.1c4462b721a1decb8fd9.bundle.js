"use strict";(self.webpackChunkJolteon=self.webpackChunkJolteon||[]).push([[290],{3152:(e,t,s)=>{s.d(t,{Z:()=>a});var l=s(8081),i=s.n(l),n=s(3645),r=s.n(n)()(i());r.push([e.id,"creature {\n  display: block;\n}\ncreature h3 {\n  border-bottom: 1px solid #58585885;\n}\ncreature .titleSpacer {\n  margin-top: 20px;\n}\ncreaturelist .list {\n  display: flex;\n  flex-flow: row wrap;\n}\ncreaturelist .list creature {\n  cursor: pointer;\n  display: flex;\n  height: 70px;\n  width: 150px;\n  margin: 8px;\n  box-shadow: 3px 3px 4px var(--shadow);\n}\ncreaturelist .list creature h4 {\n  color: var(--accent1);\n}\ncreaturelist .list creature .title {\n  padding: 8px 20px;\n  height: 100%;\n  width: 100%;\n  border: 1px solid var(--accent1);\n  border-radius: 5px;\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n}\ncreaturelist .list creature .titleSearch {\n  border-radius: 5px;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\ncreaturelist .list creature .close {\n  border: 1px solid var(--accent1);\n  border-radius: 5px;\n  border-left-width: 0px;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\ncreaturelist .list creature .add {\n  border: 1px solid var(--accent1);\n  border-radius: 5px;\n  padding: 8px;\n  background-color: var(--accent1);\n  color: var(--front1);\n  border-right-width: 0px;\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n}\n",""]);const a=r},599:(e,t,s)=>{s.d(t,{Z:()=>a});var l=s(8081),i=s.n(l),n=s(3645),r=s.n(n)()(i());r.push([e.id,".modal-dialog {\n  width: 90%;\n  max-width: 90%;\n}\n.modal-dialog .modal-content {\n  background-color: var(--bg1);\n}\n",""]);const a=r},7703:(e,t,s)=>{s.d(t,{Z:()=>a});var l=s(8081),i=s.n(l),n=s(3645),r=s.n(n)()(i());r.push([e.id,"",""]);const a=r},8523:(e,t,s)=>{s.d(t,{M:()=>i});var l=s(1804);class i extends l.e{getAll(e={}){return this.request(Object.assign({path:"/api/models/creature/all",method:"GET",format:"json"},e))}getFiltered(e,t={}){return this.request(Object.assign({path:"/api/models/creature/filtered",method:"GET",body:e,type:l.z.Json,format:"json"},t))}getByString(e,t={}){return this.request(Object.assign({path:`/api/models/creature/byString/${e}`,method:"GET",format:"json"},t))}getCreature(e,t={}){return this.request(Object.assign({path:`/api/models/creature/${e}`,method:"GET",format:"json"},t))}putCreature(e,t,s={}){return this.request(Object.assign({path:`/api/models/creature/${e}`,method:"PUT",body:t,type:l.z.Json,format:"json"},s))}deleteCreature(e,t={}){return this.request(Object.assign({path:`/api/models/creature/${e}`,method:"DELETE",format:"json"},t))}postNew(e={}){return this.request(Object.assign({path:"/api/models/creature/new",method:"POST",format:"json"},e))}putSpells(e,t,s={}){return this.request(Object.assign({path:`/api/models/creature/${e}/spells`,method:"PUT",body:t,type:l.z.Json,format:"json"},s))}}},290:(e,t,s)=>{s.r(t),s.d(t,{Creature:()=>V});var l={};s.r(l),s.d(l,{default:()=>P,dependencies:()=>$,name:()=>A,register:()=>R,template:()=>I});var i={};s.r(i),s.d(i,{CreatureStats:()=>G});var n={};s.r(n),s.d(n,{default:()=>z,dependencies:()=>D,name:()=>L,register:()=>W,template:()=>B});var r=s(655),a=s(1542),d=s(3379),o=s.n(d),c=s(7795),p=s.n(c),h=s(569),u=s.n(h),m=s(3565),b=s.n(m),g=s(9216),v=s.n(g),f=s(4589),x=s.n(f),y=s(3152),S={};S.styleTagTransform=x(),S.setAttributes=b(),S.insert=u().bind(null,"head"),S.domAPI=p(),S.insertStyleElement=v(),o()(y.Z,S),y.Z&&y.Z.locals&&y.Z.locals;var k=s(1478),C=s(9826),w=s(6726),j=s(7703),U={};U.styleTagTransform=x(),U.setAttributes=b(),U.insert=u().bind(null,"head"),U.domAPI=p(),U.insertStyleElement=v(),o()(j.Z,U),j.Z&&j.Z.locals&&j.Z.locals;var O=s(7694),E=s(8729),T=s(5587),M=s(842);const A="creaturestats",I='\n\n\n\n\n\n<div style="display: flex; width: 100%;" if.bind="base">\n\n  \x3c!-- column --\x3e\n  <div style="width: 33%;">\n    <h5>Resource</h5>\n    <tablesimple characs.bind="Characteristics.resourcesCreatureModel" base.bind="base"></tablesimple>\n    <h5>Other</h5>\n    <tablesimple characs.bind="Characteristics.others" base.bind="base"></tablesimple>\n  </div>\n  \n  \x3c!-- column --\x3e\n  <div style="width: 33%;">\n    <h5>Affinity</h5>\n    <tablesimple characs.bind="Characteristics.affinities" base.bind="base"></tablesimple>\n    <h5>State</h5>\n    <tablebool characs.bind="Characteristics.states" base.bind="base"></tablebool>\n  </div>\n\n  <div style="width: 33%;">\n    <h5>Resistance</h5>\n    <tablesimple characs.bind="Characteristics.resistances" base.bind="base"></tablesimple>\n  </div>\n\n</div>\n',P=I,$=[O,E,T,M];let q;function R(e){q||(q=a.b_N.define({name:A,template:I,dependencies:$})),e.register(q)}var Z=s(9344),J=s(2074),N=s(5746);s(1932);let G=class{constructor(e,t){this.ea=e,this.statsController=t,this.Characteristics=N.Mt,this.base=null,e.subscribe("stat:base:change",(e=>{this.postUpdate(this.base,e)}))}binding(){this.statsController.getStats(this.baseuid).then((e=>this.base=e.data))}async postUpdate(e,t){const s=parseInt(t.value.toString(),10);let l;l=isNaN(s)?this.statsController.putBool(e.entityUid,t):this.statsController.putSimple(e.entityUid,t);try{(await l).data.matchedCount>0?this.ea.publish("operation:saved"):this.ea.publish("operation:failed")}catch(e){this.ea.publish("operation:failed")}}};(0,r.gn)([a.ExJ,(0,r.w6)("design:type",String)],G.prototype,"baseuid",void 0),G=(0,r.gn)([(0,a.MoW)(l),(0,Z.f3)(Z.Rp,J.s),(0,r.w6)("design:paramtypes",[Object,J.s])],G);const L="creature",B='\n\n\n\n\n\n\x3c!-- <div if.bind="model"> --\x3e\n\n  <template if.bind="isvignette">\n    <button class="title btn-outline" click.trigger="clickCreature()">\n      <stringcomponent uid.bind="model.nameId" editable.bind="!isvignette"></stringcomponent>\n      \x3c!-- view-model.ref="name"  --\x3e\n      \x3c!-- ${name.entity.value} --\x3e\n      \x3c!-- <au-slot></au-slot> --\x3e\n    </button>\n  \n    \x3c!-- delete & confirm --\x3e\n    <button class="btn close" data-bs-toggle="modal" data-bs-target="#deleteCreature-${model.entityUid}">x</button>\n    <modal id="deleteCreature-${model.entityUid}" header="Delete Creature?" close.bind=false footer.bind=true callbackok.bind="() => clickRemove()">\n      Confirm delete ${name.entity.value}?\n    </modal>\n  </template>\n  \n  \n  <template else>\n    <h3>Creature #${model.modelUid}</h3>\n    <div class="d-flex">\n      <stringcomponent uid.bind="model.nameId" editable=true></stringcomponent>\n      <stringcomponent uid.bind="model.descriptionId" editable=true large=true class="large"></stringcomponent>\n      \x3c!-- view-model.ref="name"\n           view-model.ref="desc" --\x3e\n    </div>\n  \n  \n    <h3 class="titleSpacer">Skins</h3>\n    \x3c!-- <spelllist mode="creature" spellids.bind="model.spellIds" creatureid.bind="model.modelUid" \n        callbackadd.bind="s => onAddSpell(s)" callbackremove.bind="s => onRemoveSpell(s)"\n    ></spelllist> --\x3e\n\n    <h3 class="titleSpacer">Spells</h3>\n    <spelllist mode="creature" spellids.bind="model.spellIds" creatureid.bind="model.modelUid" \n        callbackadd.bind="s => onAddSpell(s)" callbackremove.bind="s => onRemoveSpell(s)"\n    ></spelllist>\n  \n    <h3 class="titleSpacer">Passives</h3>\n    <statuslist mode="creaturePassives" passiveids.bind="model.statusPasiveIds"></statuslist>\n  \n    <h3 class="titleSpacer">Stats</h3>\n    <creaturestats baseuid.bind="model.statsId" growthuid.bind="model.growthStats"></creaturestats>\n  </template>\n  \n\n\x3c!-- </div> --\x3e\n',z=B,D=[k,C,w,i];let F;function W(e){F||(F=a.b_N.define({name:L,template:B,dependencies:D})),e.register(F)}var _=s(9561),K=s(8523),H=s(1804);class Q extends H.e{getSkinAll(e={}){return this.request(Object.assign({path:"/api/models/creature/skin/all",method:"GET",format:"json"},e))}getSkin(e,t={}){return this.request(Object.assign({path:`/api/models/creature/skin/${e}`,method:"GET",format:"json"},t))}putSkin(e,t,s={}){return this.request(Object.assign({path:`/api/models/creature/skin/${e}`,method:"PUT",body:t,type:H.z.Json,format:"json"},s))}deleteSkin(e,t={}){return this.request(Object.assign({path:`/api/models/creature/skin/${e}`,method:"DELETE",format:"json"},t))}getSkin2(e,t,s={}){return this.request(Object.assign({path:`/api/models/creature/skin/${e}`,method:"GET",query:t,format:"json"},s))}postSkin(e={}){return this.request(Object.assign({path:"/api/models/creature/skin",method:"POST",format:"json"},e))}}let V=class{constructor(e,t,s,l){this.ea=e,this.router=t,this.creatureController=s,this.skinController=l,this.isvignette=!1}binding(){}async loading(e,t,s){this.uid=e.uid;try{let e=await this.creatureController.getCreature(this.uid);this.model=e.data,console.log("nav to new creature"),this.ea.publish("navcrumb:spell",null),this.ea.publish("navcrumb:creature",{modeluid:this.model.modelUid,nameuid:this.model.nameId})}catch(e){this.router.load("editor")}}clickCreature(){this.router.load("/editor/creature/"+this.model.modelUid)}clickRemove(){this.creatureController.deleteCreature(this.model.modelUid)}async clickNewSkin(){let e=await this.skinController.postSkin();this.model.skinIds.push(e.data.entityUid),this.creatureController.putCreature(this.model.modelUid,this.model)}onAddSpell(e){console.log("creature onAddSpell: "+e.modelUid),this.model.spellIds.push(e.entityUid),this.creatureController.putSpells(this.model.modelUid,this.model.spellIds)}onRemoveSpell(e){let t=this.model.spellIds.indexOf(e.entityUid);-1!=t&&(this.model.spellIds.splice(t,1),this.creatureController.putSpells(this.model.modelUid,this.model.spellIds))}};(0,r.gn)([a.ExJ,(0,r.w6)("design:type",Object)],V.prototype,"model",void 0),(0,r.gn)([a.ExJ,(0,r.w6)("design:type",Boolean)],V.prototype,"isvignette",void 0),V=(0,r.gn)([(0,a.MoW)(n),(0,Z.f3)(Z.Rp,_.v5,K.M,Q),(0,r.w6)("design:paramtypes",[Object,Object,K.M,Q])],V)},9826:(e,t,s)=>{s.r(t),s.d(t,{SpellList:()=>I});var l={};s.r(l),s.d(l,{default:()=>C,dependencies:()=>w,name:()=>S,register:()=>U,template:()=>k});var i=s(655),n=s(1542),r=s(3379),a=s.n(r),d=s(7795),o=s.n(d),c=s(569),p=s.n(c),h=s(3565),u=s.n(h),m=s(9216),b=s.n(m),g=s(4589),v=s.n(g),f=s(599),x={};x.styleTagTransform=v(),x.setAttributes=u(),x.insert=p().bind(null,"head"),x.domAPI=o(),x.insertStyleElement=b(),a()(f.Z,x),f.Z&&f.Z.locals&&f.Z.locals;var y=s(9988);const S="spelllist",k='\n\n\x3c!-- creature spells --\x3e\n<div if.bind="mode == \'creature\'">\n\n  \x3c!-- Button trigger modal --\x3e\n  <button type="button" class="btn listMenu" data-bs-toggle="modal" data-bs-target="#spellSearchModal">Add Spell</button>\n  <button class="btn listMenu" click.trigger="clickCreate()">New Spell</button>\n\n  \x3c!-- Modal --\x3e\n  <div class="modal fade" id="spellSearchModal" data-bs-keyboard="false" tabindex="-1" aria-labelledby="spellSearchModalLabel" aria-hidden="true">\n    <div class="modal-dialog modal-dialog-scrollable">\n      <div class="modal-content">\n        <div class="modal-header">\n          <h5 class="modal-title" id="spellSearchModalLabel">Spell select</h5>\n          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n        </div>\n        <div class="modal-body">\n          <spelllist mode="search" creatureid.bind="creatureid" callbackadd.bind="s => clickAddToCreature(s)"></spelllist>\n        </div>\n        <div class="modal-footer"></div>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- creature spell list --\x3e\n  <div class="list">\n    <spell repeat.for="spell of spells" view-model.ref="refs[$index]" mode.bind="mode" model.bind="spell" isvignette.bind="true" \n        callbackremove.bind="s => clickRemove(s)"\n    ></spell>\n  </div>\n\n</div>\n\n\n\x3c!-- root or search --\x3e\n<div if.bind="mode == \'root\' || mode == \'search\'">\n\n  <div>\n    <button class="btn listMenu" click.trigger="refresh()">Refresh</button>\n    <button class="btn listMenu" click.trigger="clickCreate()">New Spell</button>\n    <input type="string" value.bind="filter" change.trigger="onSearch()" placeholder="search..." />\n  </div>\n\n  \x3c!-- root --\x3e\n  <div if.bind="mode == \'root\'" class="list">\n    <spell repeat.for="spell of filteredSpells" view-model.ref="refs[$index]" mode.bind="mode" model.bind="spell" isvignette.bind="true"\n        callbackremove.bind="s => clickRemove(s)" \n    ></spell>\n  </div>\n  \x3c!-- search (add to creature) --\x3e\n  <div if.bind="mode == \'search\'" class="list">\n    <spell repeat.for="spell of filteredSpells" view-model.ref="refs[$index]" mode.bind="mode" model.bind="spell" isvignette.bind="true" data-bs-dismiss="modal" \n        callbackadd.bind="callbackadd"\n    ></spell>\n  </div>\n\n</div>\n',C=k,w=[y];let j;function U(e){j||(j=n.b_N.define({name:S,template:k,dependencies:w})),e.register(j)}var O=s(5599),E=s(9344),T=s(6892),M=s(9561),A=s(8523);s(1932);let I=class{constructor(e,t,s,l){this.ea=e,this.router=t,this.spellController=s,this.creatureController=l,this.mode="root",this.spellids=[],this.callbackremove=e=>{},this.callbackadd=e=>{},this.spells=[],this.filteredSpells=[],this.selectedSpells=[],this.filter="",this.refs=[],this.numPerPage=50,this.page=0}async binding(){await this.refresh()}async refresh(){if(!this.mode)return;let e;"root"==this.mode&&this.ea.publish("navcrumb:spell",null),this.page,this.numPerPage,this.numPerPage,e="creature"==this.mode?this.spellController.getList({list:this.spellids}):this.spellController.getAll();try{let t=await e;this.spells=t.data,this.filteredSpells=[...this.spells]}catch(e){O.FN.create({title:"Spells",message:"Failed to fetch spells from server",status:O.vM.DANGER,timeout:2e3})}}async clickCreate(){let e=await this.spellController.postNew();this.spells.push(e.data),this.filteredSpells.push(e.data),this.callbackadd(e.data)}onSearch(){if(!this.filter)return void(this.filteredSpells=[...this.spells]);let e=this.filter.toLowerCase();this.spellController.getByString(e).then((e=>{this.filteredSpells=e.data}))}async clickAddToCreature(e){console.log("spell list click add (creature) "+e.modelUid),this.spellids.push(e.entityUid),this.spells.push(e),"creature"==this.mode&&this.callbackadd(e)}async clickRemove(e){let t=this.spells.findIndex((t=>t.modelUid==e.modelUid));-1!=t&&("creature"==this.mode&&(this.callbackremove(e),this.spells.splice(t,1),this.filteredSpells.splice(t,1)),"root"==this.mode&&this.spellController.deleteSpell(e.modelUid).then((e=>{this.spells.splice(t,1),this.filteredSpells.splice(t,1)})))}};(0,i.gn)([n.ExJ,(0,i.w6)("design:type",String)],I.prototype,"mode",void 0),(0,i.gn)([n.ExJ,(0,i.w6)("design:type",Array)],I.prototype,"spellids",void 0),(0,i.gn)([n.ExJ,(0,i.w6)("design:type",String)],I.prototype,"creatureid",void 0),(0,i.gn)([n.ExJ,(0,i.w6)("design:type",Object)],I.prototype,"callbackremove",void 0),(0,i.gn)([n.ExJ,(0,i.w6)("design:type",Object)],I.prototype,"callbackadd",void 0),I=(0,i.gn)([(0,n.MoW)(l),(0,E.f3)(E.Rp,M.v5,T.K,A.M),(0,i.fM)(1,M.v5),(0,i.w6)("design:paramtypes",[Object,Object,T.K,A.M])],I)}}]);