"use strict";(self.webpackChunkJolteon=self.webpackChunkJolteon||[]).push([[907],{4370:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(8081),s=n.n(a),i=n(3645),o=n.n(i)()(s());o.push([e.id,".effectlist {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n}\n.effectlist effect {\n  margin-top: 10px;\n}\n.effectlist effect:not(:last-child) {\n  margin-bottom: 10px;\n}\n.effectlist effect {\n  box-shadow: var(--shadow) 4px 4px 4px;\n  padding: 10px;\n  border-width: 1px;\n  border-style: solid;\n  border-color: var(--accent1);\n  border-radius: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n}\n.effectlist effect .effectSection:not(:first-child) {\n  margin-top: 10px;\n}\n.effectlist effect ul {\n  list-style: none;\n}\n.effectlist effect .effecttitle {\n  display: flex;\n}\n.effectlist effect .effecttitle .effecttitletitle {\n  display: flex;\n  flex-grow: 1;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.3);\n  margin-bottom: 8px;\n}\n.effectlist effect .effecttitle .effecttitletitle h5 {\n  word-wrap: normal;\n  color: var(--front0);\n  padding-right: 8px;\n  margin-right: auto;\n  margin-bottom: 0px;\n}\n.effectlist effect .effecttitle .effecttitletitle h5:not(:first-of-type) {\n  opacity: 0.4;\n}\n.effectlist effect .effecttitle .effecttitletitle h5:last-of-type {\n  flex-grow: 1;\n}\n.effectlist effect .effecttitle .effecttitletitle:hover > h5 {\n  color: var(--accent0);\n}\n.effectlist effect .effecttitle button {\n  margin-left: 10px;\n}\n",""]);const l=o},318:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(8081),s=n.n(a),i=n(3645),o=n.n(i)()(s());o.push([e.id,"effect-model-selector input {\n  display: block;\n  height: 45px;\n  margin: 10px;\n  width: calc(100% - 20px);\n}\n.schemalist {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 10px;\n  box-sizing: border-box;\n}\n.schema {\n  cursor: pointer;\n  margin: 10px;\n  padding: 8px;\n  border-width: 1px;\n  border-style: solid;\n  border-color: var(--accent1);\n  border-radius: 5px;\n  width: calc(25% - 20px);\n  height: 135px;\n}\n.schema h6 {\n  word-wrap: break-word;\n  padding-bottom: 4px;\n  border-bottom: 1px dashed rgba(255, 255, 255, 0.3);\n}\n.schema ul {\n  list-style: none;\n}\n.schema:hover {\n  border-color: var(--accent0);\n}\n",""]);const l=o},2790:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(8081),s=n.n(a),i=n(3645),o=n.n(i)()(s());o.push([e.id,"propertygrid .property {\n  padding: 4px;\n}\n",""]);const l=o},7562:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(8081),s=n.n(a),i=n(3645),o=n.n(i)()(s());o.push([e.id,"",""]);const l=o},545:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(8081),s=n.n(a),i=n(3645),o=n.n(i)()(s());o.push([e.id,"zone td {\n  padding-right: 8px;\n}\n",""]);const l=o},8702:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(1804);class s extends a.e{getAll(e={}){return this.request(Object.assign({path:"/api/models/effect/all",method:"GET",format:"json"},e))}getEffect(e,t={}){return this.request(Object.assign({path:`/api/models/effect/${e}`,method:"GET",format:"json"},t))}putEffect(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}deleteEffect(e,t={}){return this.request(Object.assign({path:`/api/models/effect/${e}`,method:"DELETE",format:"json"},t))}postNew(e,t={}){return this.request(Object.assign({path:"/api/models/effect/new",method:"POST",query:e,format:"json"},t))}postCopy(e,t={}){return this.request(Object.assign({path:"/api/models/effect/copy",method:"POST",body:e,type:a.z.Json,format:"json"},t))}putSchema(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/schema`,method:"PUT",query:t,format:"json"},n))}putAddEffect(e,t,n={}){return this.request(Object.assign({path:`/api/models/effect/${e}/addEffect/${t}`,method:"PUT",format:"json"},n))}putRemoveEffect(e,t={}){return this.request(Object.assign({path:`/api/models/effect/removeEffect/${e}`,method:"PUT",format:"json"},t))}}},2074:(e,t,n)=>{n.d(t,{s:()=>s});var a=n(1804);class s extends a.e{getAll(e={}){return this.request(Object.assign({path:"/api/models/stats/all",method:"GET",format:"json"},e))}getFiltered(e,t={}){return this.request(Object.assign({path:"/api/models/stats/filtered",method:"GET",body:e,type:a.z.Json,format:"json"},t))}getStats(e,t={}){return this.request(Object.assign({path:`/api/models/stats/${e}`,method:"GET",format:"json"},t))}putStats(e,t,n={}){return this.request(Object.assign({path:`/api/models/stats/${e}`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}deleteStats(e,t={}){return this.request(Object.assign({path:`/api/models/stats/${e}`,method:"DELETE",format:"json"},t))}postStat(e,t={}){return this.request(Object.assign({path:"/api/models/stats/stat",method:"POST",query:e,format:"json"},t))}putBool(e,t,n={}){return this.request(Object.assign({path:`/api/models/stats/${e}/bool`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}putSimple(e,t,n={}){return this.request(Object.assign({path:`/api/models/stats/${e}/simple`,method:"PUT",body:t,type:a.z.Json,format:"json"},n))}}},9522:(e,t,n)=>{n.r(t),n.d(t,{Effect:()=>X});var a={};n.r(a),n.d(a,{default:()=>j,dependencies:()=>M,name:()=>z,register:()=>U,template:()=>T});var s={};n.r(s),n.d(s,{default:()=>A});var i={};n.r(i),n.d(i,{default:()=>V,dependencies:()=>R,name:()=>q,register:()=>W,template:()=>B});var o=n(655),l=n(1542),d=n(3379),c=n.n(d),r=n(7795),p=n.n(r),f=n(569),h=n.n(f),g=n(3565),b=n.n(g),m=n(9216),u=n.n(m),v=n(4589),y=n.n(v),x=n(4370),k={};k.styleTagTransform=y(),k.setAttributes=b(),k.insert=h().bind(null,"head"),k.domAPI=p(),k.insertStyleElement=u(),c()(x.Z,k),x.Z&&x.Z.locals&&x.Z.locals;var w=n(2790),S={};S.styleTagTransform=y(),S.setAttributes=b(),S.insert=h().bind(null,"head"),S.domAPI=p(),S.insertStyleElement=u(),c()(w.Z,S),w.Z&&w.Z.locals&&w.Z.locals;var E=n(5041),C=n(5142),$=n(9990),O=n(9841);const z="propertygrid",T='\n\n\n\n\n<div if.bind="data && schema">\n  \x3c!-- hi prop grid --\x3e\n\n  <table>\n    <tbody>\n      <tr class="property" repeat.for="prop of keys">\n        <td style="padding-right: 8px; color: var(--accent2);" data-bs-toggle="collapse" data-bs-target="#collapseZone-${uid}-schema">\n          ${prop}: \n          ${propName(prop)}\n        </td>\n        <td>\n          <template switch.bind="propName(prop)">\n      \n            <zone uid="${uid}-schema" case="IZone" zone.bind="data[prop]" callbacksave.bind="() => onChange()"></zone>\n      \n            <select case=\'ElementType\' value.bind="data[prop]" change.trigger="onChange()">\n              <option repeat.for="ele of Enums.elements" model.bind="$index">${ele}</option>\n            </select>\n      \n            <select case=\'ActorType\' value.bind="data[prop]" change.trigger="onChange()">\n              <option repeat.for="act of Enums.actors" model.bind="$index">${act}</option>\n            </select>\n      \n            <statsmini case="IStats"           stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.allSectioned"></statsmini>\n            <statsmini case="CreatureStats"    stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.creaturesSectioned"></statsmini>\n            <statsmini case="StatusModelStats" stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.statusModels"></statsmini>\n            <statsmini case="SpellModelStats"  stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.spellModels"></statsmini>\n            <statsmini case="SpellStats"       stats.bind="data[prop]" callbacksavestat.bind="() => onChange()" characsallowed.bind="Characteristics.spells"></statsmini>\n\n\n            \x3c!-- stat : select charac id + value --\x3e\n            \x3c!-- charac id selector --\x3e\n            \x3c!-- iid selector:  string, creature(summon), spell, status, animation, scene/model asset  --\x3e\n            <input case="StringIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="CreatureIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="SpellIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="StatusIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="AssetIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n            <input case="AnimationSetIID" type="text" value.bind="data[prop]" change.trigger="onChange()"/>\n      \n            <template default-case switch.bind="typof(prop)">\n              <input case="number" type="number" value.bind="data[prop]"  change.trigger="onChange()"/>\n              \x3c!-- <div case="string"> --\x3e\n                \x3c!-- who even has a string property --\x3e\n                \x3c!-- and more like a string selector than a string component --\x3e\n                \x3c!-- stringcomponent (StringEntity?) --\x3e\n              \x3c!-- </div> --\x3e\n              <div case="boolean">\n                {bool}\n                \x3c!-- toggle button --\x3e\n                  <div style="margin: 5px;">\n                      <input type="checkbox" class="btn-check" id="btn-check-outlined ${prop}" autocomplete="off" checked.bind="data[prop]" change.trigger="onChange()">\n                      \x3c!-- change.trigger="onChangeBase" --\x3e\n                      <label class="btn btn-outline shadow-none" for="btn-check-outlined ${prop}">${characName}</label><br>\n                  </div>\n              </div>\n      \n            </template>\n          </template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n</div>\n',j=T,M=[E,C,$,O];let J;function U(e){J||(J=l.b_N.define({name:z,template:T,dependencies:M})),e.register(J)}var N=n(5746);n(1932);let Z=class{constructor(){this.Enums=N.Yb,this.Characteristics=N.Mt,this.callbacksave=()=>{}}get keys(){return Object.keys(this.data).filter((e=>"$type"!=e))}get values(){return Object.values(this.data)}typof(e){return typeof this.data[e]}propName(e){return this.schema.properties[e]}onChange(){this.callbacksave()}};(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],Z.prototype,"data",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],Z.prototype,"schema",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",String)],Z.prototype,"uid",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],Z.prototype,"callbacksave",void 0),Z=(0,o.gn)([(0,l.MoW)(a),(0,o.w6)("design:paramtypes",[])],Z);const A=Z;var I=n(1478),D=n(7915),P=n(8142);const q="effect",B='\n\n\n\n\n\n\x3c!-- drag.trigger="e => onDrag(e)"  --\x3e\n<div if.bind="model">\n\n  <div class="effecttitle">\n    \x3c!-- title --\x3e\n    <div class="effecttitletitle clickable" data-bs-toggle="collapse" data-bs-target="#collapseEffectContent-${model.entityUid}">\n      <h5 click.trigger="clickMinimize()">${modelName}</h5>\n      <h5 click.trigger="clickMinimize()">(${model.effectIds.length})</h5>\n      <h5 click.trigger="clickMinimize()">${model.entityUid}</h5>\n    </div>\n    <button class="btn btn-floating" click.trigger="clickCopy()"><i class="fa-regular fa-copy"></i></button>\n    <button class="btn btn-floating" click.trigger="clickPaste()"><i class="fa-regular fa-clipboard"></i></button>\n    <button class="btn btn-floating" click.trigger="clickMoveUp()"><i class="fa-solid fa-angle-up"></i></button>\n    <button class="btn btn-floating" click.trigger="clickMoveDown()"><i class="fa-solid fa-angle-down"></i></button>\n    \x3c!-- delete & confirm --\x3e\n    <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#removeEffectModal-${model.entityUid}"><i class="fa-solid fa-xmark"></i></button>\n    <modal id="removeEffectModal-${model.entityUid}" header="Remove effect?" close.bind=false footer.bind=true callbackok.bind="() => clickRemove()">\n      Confirm remove ${modelName}?\n    </modal>\n\n  </div>\n\n  \x3c!-- content --\x3e\n  \x3c!--  if.bind="!minimized" --\x3e\n  <div class="collapse show" id="collapseEffectContent-${model.entityUid}" if.bind="model">\n\n    \x3c!-- properties section --\x3e\n    <div class="effectSection d-flex">\n      <div class="eblock" style="margin-right: 15px;">\n\n        \x3c!-- click.trigger="clickMinimize()"  --\x3e\n        <h6 class="clickable" data-bs-toggle="collapse" data-bs-target="#collapseZone-${model.entityUid}">Zone</h6>\n        <zone zone.bind="model.targetAcquisitionZone" uid.bind="model.entityUid" callbacksave.bind="() => onSave()"></zone>\n      </div>\n\n      <div style="margin-right: 15px;">\n        <h6>Caster Condition</h6>\n        <h6>Target Filter</h6>\n      </div>\n      <div style="margin-right: 15px;">\n        <h6>Triggers</h6>\n        <button class="btn btn-floating" click.trigger="clickAddTrigger()">+</button>\n        <trigger repeat.for="trigger of model.triggers" model.bind="trigger" callbacksave.bind="() => onSave()"></trigger>\n      </div>\n\n      <div class="eblock" style="flex-grow: 1;">\n        <h6>Schema</h6>\n        \x3c!-- change type --\x3e\n        <button class="btn btn-floating btn-changeSchema" data-bs-toggle="modal" data-bs-target="#effectSchemaTypeModal-${model.entityUid}">\n          Change type\n        </button>\n        <modal id="effectSchemaTypeModal-${model.entityUid}" header="Change Schema Type" close.bind=false footer.bind=false>\n          <effect-model-selector onselectcallback.bind="e => onChangeSchemaType(e)"></effect-model-selector>\n        </modal>\n        \x3c!-- schema properties --\x3e\n        <propertygrid data.bind="model.schema" schema.bind="schema" uid.bind="model.entityUid" callbacksave.bind="() => onSave()"></propertygrid>\n      </div>\n    </div>\n\n    \x3c!-- children section --\x3e\n    <effectlist if.bind="model.effectIds" effectids.bind="model.effectIds" modaluid.bind="model.entityUid" callbacksave.bind="() => onSave()"></effectlist>\n\n\x3c!-- \n    <div class="effectSection">\n      <h6 class="clickable" data-bs-toggle="collapse" data-bs-target="#collapseEffects-${model.entityUid}">\n        Effects\n      </h6>\n      <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#effectChildModal-${model.entityUid}">+</button>\n      <button class="btn btn-floating" click.trigger="clickPasteNew()"><i class="fa-regular fa-clipboard"></i></button>\n\n      <modal id="effectChildModal-${model.entityUid}" header="Add Effect Child" close.bind=false footer.bind=false>\n        <effect-model-selector onselectcallback.bind="e => onAddChild(e)"></effect-model-selector>\n      </modal>\n\n      <div class="effectlist collapse show" id="collapseEffects-${model.entityUid}">\n        <effect repeat.for="effectid of model.effectIds" uid.bind="effectid" callbackmoveup.bind="e => onMoveEffectUp(e)" callbackmovedown.bind="e => onMoveEffectDown(e)" callbackremove.bind="e => onRemoveEffect(e)"></effect>\n      </div>\n    </div> --\x3e\n\n\n\n  </div>\n\n</div>\n\n\x3c!-- modelUid --\x3e\n\x3c!-- model name --\x3e\n\x3c!-- model desc --\x3e\n\x3c!-- model BoardTargetType --\x3e\n\x3c!-- model propertySchemaType => property names --\x3e\n\n\x3c!-- zone --\x3e\n\x3c!-- conditions target --\x3e\n\x3c!-- conditions caster --\x3e\n\x3c!-- triggers --\x3e\n',V=B,R=[s,I,D,E,P];let F;function W(e){F||(F=l.b_N.define({name:q,template:B,dependencies:R})),e.register(F)}var _=n(5367),G=n(9561),H=n(9344),L=n(8702),Y=n(2765),K=n(5599);let X=class{constructor(e,t,n,a){this.ea=e,this.router=t,this.effectController=n,this.propertiesController=a,this.callbackmoveup=e=>{},this.callbackmovedown=e=>{},this.callbackremove=e=>{},this.minimized=!1}binding(){this.effectController.getEffect(this.uid).then((e=>{this.model=e.data}),(e=>{console.log(e)}))}get modelName(){let e=+this.model.modelUid;return _.JN[e].toString()}get schema(){return N.zt.schemas.find((e=>e.name==this.modelName))}clickMinimize(){this.minimized=!this.minimized}clickMoveUp(){this.callbackmoveup(this.model)}clickMoveDown(){this.callbackmovedown(this.model)}clickRemove(){this.callbackremove(this.model)}clickAddTrigger(){}clickCopy(){navigator.clipboard.writeText(JSON.stringify(this.model)),K.FN.create({title:"Effect",message:"Copied",status:K.vM.INFO,timeout:1e3})}async clickPaste(){let e=await navigator.clipboard.readText(),t=JSON.parse(e);this.effectController.putEffect(this.model.entityUid,t).then((e=>this.model=e.data)).then((e=>this.ea.publish("operation:saved")))}onChangeSchemaType(e){this.effectController.putSchema(this.model.entityUid,{schemaName:e.name}).then((e=>this.model=e.data)).then((e=>this.ea.publish("operation:saved")))}onSave(){this.effectController.putEffect(this.model.entityUid,this.model).then((e=>{this.model=e.data,this.ea.publish("operation:saved")}),(e=>{this.ea.publish("operation:failed")}))}};(0,o.gn)([l.ExJ,(0,o.w6)("design:type",String)],X.prototype,"uid",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],X.prototype,"callbackmoveup",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],X.prototype,"callbackmovedown",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],X.prototype,"callbackremove",void 0),X=(0,o.gn)([(0,l.MoW)(i),(0,H.f3)(H.Rp,G.v5),(0,o.w6)("design:paramtypes",[Object,Object,L.Z,Y.i])],X)},8142:(e,t,n)=>{n.r(t),n.d(t,{Effectlist:()=>v});var a={};n.r(a),n.d(a,{default:()=>p,dependencies:()=>f,name:()=>c,register:()=>g,template:()=>r});var s=n(655),i=n(1542),o=n(7915),l=n(1478),d=n(9522);const c="effectlist",r='\n\n\n\n\n\x3c!-- children section --\x3e\n<div class="effectSection" if.bind="effectids">\n  <h6 class="clickable" data-bs-toggle="collapse" data-bs-target="#collapseEffects-${modaluid}">\n    Effects\n    \x3c!-- (${model.effectIds.length}) --\x3e\n  </h6>\n\n  <button class="btn btn-floating" data-bs-toggle="modal" data-bs-target="#effectChildModal-${modaluid}">+</button>\n  <button class="btn btn-floating tooltip" click.trigger="clickPasteNewEffect()">\n    <i class="fa-regular fa-clipboard"></i>\n    <span class="tooltiptext">Tooltip text</span>\n  </button>\n\n  <modal id="effectChildModal-${modaluid}" header="Add Effect Child" close.bind=false footer.bind=false>\n    <effect-model-selector onselectcallback.bind="e => onAddChild(e)"></effect-model-selector>\n  </modal>\n\n  <div class="effectlist collapse show" id="collapseEffects-${modaluid}">\n    <effect id.bind="effectid" repeat.for="effectid of effectids" uid.bind="effectid" \n        draggable="true" drop.trigger="e => onDrop(e, effectid)" \n        dragstart.trigger="e => onDrag(e, effectid)" dragover.trigger="e => onDragOver(e, effectid)"\n        callbackmoveup.bind="e => onMoveEffectUp(e)" \n        callbackmovedown.bind="e => onMoveEffectDown(e)" \n        callbackremove.bind="e => onRemoveEffect(e)"\n    ></effect>\n  </div>\n\n</div>\n',p=r,f=[o,l,d];let h;function g(e){h||(h=i.b_N.define({name:c,template:r,dependencies:f})),e.register(h)}var b=n(9344),m=n(8702),u=n(9561);n(1932);let v=class{constructor(e,t,n){this.ea=e,this.router=t,this.effectController=n,this.effectids=[],this.modaluid="",this.callbacksave=()=>{}}binding(){}save(){this.callbacksave()}async onAddChild(e){this.effectController.postNew({schemaName:e.name}).then((e=>this.effectids.push(e.data.entityUid))).then((e=>this.save()))}async clickPasteNewEffect(){let e=await navigator.clipboard.readText(),t=JSON.parse(e);this.effectController.postCopy(t).then((e=>this.effectids.push(e.data.entityUid))).then((e=>this.save()))}onMoveEffectUp(e){let t=this.effectids.indexOf(e.entityUid);-1!=t?(this.effectids.splice(t,1),this.effectids.splice(t-1,0,e.entityUid),this.save()):console.error("effect list.moveEffectUp: effect not found: "+JSON.stringify(e))}onMoveEffectDown(e){let t=this.effectids.indexOf(e.entityUid);console.log("effect ids: "+t+", "+JSON.stringify(this.effectids)),-1!=t?(this.effectids.splice(t,1),this.effectids.splice(t+1,0,e.entityUid),this.save()):console.error("effect list.moveEffectDown: effect not found: "+JSON.stringify(e))}onRemoveEffect(e){console.log("effect list remove eff: "+e.entityUid);let t=this.effectids.indexOf(e.entityUid);this.effectids.splice(t,1),this.save()}};(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],v.prototype,"effectids",void 0),(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],v.prototype,"modaluid",void 0),(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],v.prototype,"callbacksave",void 0),v=(0,s.gn)([(0,i.MoW)(a),(0,b.f3)(b.Rp,u.v5,m.Z),(0,s.w6)("design:paramtypes",[Object,Object,m.Z])],v)},7915:(e,t,n)=>{n.r(t),n.d(t,{EffectModelSelector:()=>T});var a={};n.r(a),n.d(a,{default:()=>w,dependencies:()=>S,name:()=>x,register:()=>C,template:()=>k});var s=n(655),i=n(1542),o=n(3379),l=n.n(o),d=n(7795),c=n.n(d),r=n(569),p=n.n(r),f=n(3565),h=n.n(f),g=n(9216),b=n.n(g),m=n(4589),u=n.n(m),v=n(318),y={};y.styleTagTransform=u(),y.setAttributes=h(),y.insert=p().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=b(),l()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;const x="effect-model-selector",k='\n<input type="string" value.bind="filter" keyup.trigger="search()" placeholder="search.." />\n\n<div class="schemalist" if.bind="schemasDescriptions">\n\n  <div class="schema" repeat.for="schema of filteredSchemas" click.trigger="clickEffectModel(schema)" data-bs-dismiss="modal">\n    <h6>${schema.name}</h6>\n    <div if.bind="len(schema) > 0">\n      <div repeat.for="prop of props(schema)">\n        ${schema.properties[prop]} ${prop}\n      </div>\n    </div>\n  </div>\n\n</div>\n\n',w=k,S=[];let E;function C(e){E||(E=i.b_N.define({name:x,template:k,dependencies:S})),e.register(E)}var $=n(9344),O=n(2765),z=n(5746);n(1932);let T=class{constructor(e){this.propertiesController=e,this.onselectcallback=e=>{},this.filter="",this.schemasDescriptions=[],this.filteredSchemas=[],this.schemasDescriptions=z.zt.schemas,this.filteredSchemas=z.zt.schemas}len(e){return Object.keys(e.properties).length}strin(e){return JSON.stringify(e.properties)}props(e){return Object.keys(e.properties).filter((e=>"$type"!=e))}search(){let e=this.filter;e||(this.filteredSchemas=this.schemasDescriptions),e=e.toLowerCase(),this.filteredSchemas=this.schemasDescriptions.filter((t=>!!t.name.toLowerCase().includes(e)||!!this.props(t).some((t=>t.toLowerCase().includes(e)))||!!this.props(t).some((n=>t.properties[n].toLowerCase().includes(e)))||void 0))}clickEffectModel(e){this.onselectcallback(e)}};(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],T.prototype,"onselectcallback",void 0),T=(0,s.gn)([(0,i.MoW)(a),(0,$.f3)(O.i),(0,s.w6)("design:paramtypes",[O.i])],T)},9841:(e,t,n)=>{n.r(t),n.d(t,{Statpropertyselector:()=>g});var a={};n.r(a),n.d(a,{default:()=>d,dependencies:()=>c,name:()=>o,register:()=>p,template:()=>l});var s=n(655),i=n(1542);const o="statpropertyselector",l='\n\n\x3c!-- <input type="string" value.bind="filter" keyup.trigger="search()" placeholder="search.." /> --\x3e\n\n<div repeat.for="type of sections" if.bind="characs">\n    \x3c!-- ${type} --\x3e\n    <h6>${getSectionName(type)}</h6>\n    <div class="schemalist">\n      <div class="btn btn-outline" style="margin: 5px;" repeat.for="property of type" click.trigger="clickCharacteristic(property)" data-bs-dismiss="modal">\n          ${property.baseName}: ${getValueType(property)}\n      </div>\n    </div>\n</div>\n\n\x3c!-- resources --\x3e\n\x3c!-- affinities --\x3e\n\x3c!-- resistances --\x3e\n\x3c!-- other --\x3e\n\x3c!-- state --\x3e\n\n\x3c!-- contextuals --\x3e\n\x3c!-- statuscontainer --\x3e\n\x3c!-- statusinstance --\x3e\n\x3c!-- spellmodel --\x3e\n\x3c!-- spell --\x3e\n',d=l,c=[];let r;function p(e){r||(r=i.b_N.define({name:o,template:l,dependencies:c})),e.register(r)}var f=n(5746),h=n(5367);n(1932);let g=class{constructor(){this.Characteristics=f.Mt,this.characs=f.Mt.allSectioned,this.callbackselect=e=>{}}binding(){}hasMultipleSections(){return!!this.characs&&Array.isArray(this.characs[0])}get sections(){return this.hasMultipleSections()?this.characs:[this.characs]}clickCharacteristic(e){this.callbackselect(e)}search(){}getSectionName(e){return e[0].nameModelUid.split(".")[1]}getValueType(e){let t=e.statValueType;return h.$t[t]}};(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Array)],g.prototype,"characs",void 0),(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],g.prototype,"callbackselect",void 0),g=(0,s.gn)([(0,i.MoW)(a),(0,s.w6)("design:paramtypes",[])],g)},9990:(e,t,n)=>{n.r(t),n.d(t,{Statsmini:()=>R});var a={};n.r(a),n.d(a,{default:()=>O,dependencies:()=>z,name:()=>C,register:()=>j,template:()=>$});var s={};n.r(s),n.d(s,{StatsMiniRow:()=>N});var i={};n.r(i),n.d(i,{default:()=>I,dependencies:()=>D,name:()=>Z,register:()=>q,template:()=>A});var o=n(655),l=n(1542),d=n(3379),c=n.n(d),r=n(7795),p=n.n(r),f=n(569),h=n.n(f),g=n(3565),b=n.n(g),m=n(9216),u=n.n(m),v=n(4589),y=n.n(v),x=n(7562),k={};k.styleTagTransform=y(),k.setAttributes=b(),k.insert=h().bind(null,"head"),k.domAPI=p(),k.insertStyleElement=u(),c()(x.Z,k),x.Z&&x.Z.locals&&x.Z.locals;var w=n(9841),S=n(7915),E=n(1478);const C="statsminirow",$='<td>${getCharacName()}</td>\n\n<td if.bind="isSimple()">\n  <input type="number" value.bind="getBase().value" change.trigger="onChangeStatValue" />\n</td>\n<td if.bind="isSimple() && hasgrowth">\n  (growth)\n</td>\n\n\n<td if.bind="isBool()">\n  <input type="checkbox" class="btn-check" id="btn-check-outlined ${statId}" autocomplete="off" checked.bind="getBase().value" change.trigger="onChangeStatValue">\n  <label class="btn btn-outline shadow-none" for="btn-check-outlined ${statId}">${getBase().value ? \'True\' : \'False\'}</label><br>\n</td>\n<td if.bind="isBool() && hasgrowth">\n  (growth)\n</td>\n\n\n<td if.bind="isEnum()">\n  <template switch.bind="getEnum()">\n    <select case=\'StatusMergeStrategy\' value.bind="getBase().value" change.trigger="onChangeStatValue">\n      <option repeat.for="val of Enums.statusMergeStrategies" model.bind="$index">${val}</option>\n    </select>\n    <select case=\'StatusUnbewitchStrategy\' value.bind="getBase().value" change.trigger="onChangeStatValue">\n      <option repeat.for="val of Enums.statusUnbewitchStrategies" model.bind="$index">${val}</option>\n    </select>\n  </template>\n</td>\n<td if.bind="isEnum() && hasgrowth">\n  (growth)\n</td>\n\n<td if.bind="hasadddelete">\n  <button class="btn btn-outline btn-icon" click.trigger="clickRemoveStat()">x</button>\n</td>\n',O=$,z=[];let T;function j(e){T||(T=l.b_N.define({name:C,template:$,dependencies:z})),e.register(T)}var M=n(9344),J=n(5746),U=n(5367);n(1932);let N=class{constructor(){this.Enums=J.Yb,this.Characteristics=J.Mt,this.callbacksavestat=()=>{},this.callbackdeletestat=e=>{}}binding(){}get statId(){return this.statid}getBase(){return this.base}getGrowth(){return this.growth}getCharacName(){return J.Mt.getCharac(this.statId).baseName}getCharacType(){return J.Mt.getCharac(this.statId)}isSimple(){let e=this.getCharacType();return e.statValueType==U.$t.Simple&&null==e.enumValueConstraint}isBool(){return this.getCharacType().statValueType==U.$t.Bool}isEnum(){let e=this.getCharacType();return e.statValueType==U.$t.Simple&&null!=e.enumValueConstraint}getEnum(){let e=this.getCharacType();if(!e.enumValueConstraint)return"";let t=e.enumValueConstraint.split(",")[0].split(".");return t[t.length-1].trim()}onChangeStatValue(){this.save()}clickRemoveStat(e){this.callbackdeletestat(e),this.save()}save(){this.callbacksavestat()}};(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Boolean)],N.prototype,"hasadddelete",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Boolean)],N.prototype,"hasgrowth",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",String)],N.prototype,"statid",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"base",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"growth",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"callbacksavestat",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],N.prototype,"callbackdeletestat",void 0),N=(0,o.gn)([(0,l.MoW)(a),(0,M.f3)(),(0,o.w6)("design:paramtypes",[])],N);const Z="statsmini",A='\n\n\n\n\n<temaplate if.bind="stats">\n\n\n  <button if.bind="hasadddelete" class="btn btn-outline btn-icon" data-bs-toggle="modal" data-bs-target="#statSelector-${stats.entityUid}-${idsuffix}">+</button>\n\n  <modal if.bind="hasadddelete" id="statSelector-${stats.entityUid}-${idsuffix}" header="Add Stat" close.bind=false footer.bind=false>\n    <statpropertyselector characs.bind="characsallowed" callbackselect.bind="s => onAddStat(s)"></statpropertyselector>\n  </modal>\n\n  <template if.bind="hasSections()">\n    <div repeat.for="section of characsallowed">\n      <h6 if.bind="sectionHasValues(section)">${getSectionName(section)}</h6>\n      <table class="table-striped table-sm table-borderless table-responsive-sm">\n        <tbody>\n          <tr as-element="statsminirow" repeat.for="statid of getFilteredDicKeys(section)" statid.bind="statid" base.bind="getBase(statid)" growth.bind="getGrowth(statid)" \n          hasgrowth.bind="hasgrowth" hasadddelete.bind="hasadddelete" callbacksavestat.bind="() => save()" callbackdeletestat.bind="s => clickRemoveStat(s)"></tr>\n        </tbody>\n      </table>\n    </div>\n  </template>\n\n  <template else>\n    <table class="table-striped table-sm table-borderless table-responsive-sm">\n      <tbody>\n        <tr as-element="statsminirow" repeat.for="statid of getDicKeys" statid.bind="statid" base.bind="getBase(statid)" growth.bind="getGrowth(statid)" \n        hasgrowth.bind="hasgrowth" hasadddelete.bind="hasadddelete" callbacksavestat.bind="() => save()" callbackdeletestat.bind="s => clickRemoveStat(s)"></tr>\n      </tbody>\n    </table>\n  </template>\n\n\n</temaplate>\n',I=A,D=[w,S,E,s];let P;function q(e){P||(P=l.b_N.define({name:Z,template:A,dependencies:D})),e.register(P)}var B=n(944),V=n(2074);let R=class{constructor(e){this.statsController=e,this.Enums=J.Yb,this.idsuffix="",this.characsallowed=J.Mt.allSectioned,this.hasgrowth=!1,this.hasadddelete=!0,this.showall=!1,this.callbacksavestat=()=>{}}binding(){this.statsuid&&!this.stats&&this.statsController.getStats(this.statsuid).then((e=>{this.stats=e.data}),(e=>console.log("no stats error")))}hasSections(){return!!this.characsallowed&&Array.isArray(this.characsallowed[0])}get getDicValues(){return Object.values(this.stats.base.dic)}getFilteredDicKeys(e){var t;let n=Object.keys(null===(t=this.stats)||void 0===t?void 0:t.base.dic).filter((e=>"$type"!=e&&"entityUid"!=e));return Array.isArray(e[0])?this.showall?e.map((e=>e.map((e=>e.id)))):n.filter((t=>e.some((e=>e.some((e=>e.id==t)))))):this.showall?e.map((e=>e.id)):n.filter((t=>e.some((e=>e.id==t))))}get getDicKeys(){return this.stats?this.getFilteredDicKeys(this.characsallowed):null}getBase(e){return this.stats.base.dic[e]}getGrowth(e){return this.stats.growth.dic[e]}getSectionName(e){let t=e[0];return U.xC[t.category]}sectionHasValues(e){return null==e?void 0:e.some((e=>{var t,n,a,s,i,o;return(null===(a=null===(n=null===(t=this.stats)||void 0===t?void 0:t.base)||void 0===n?void 0:n.dic)||void 0===a?void 0:a.hasOwnProperty(e.id))||(null===(o=null===(i=null===(s=this.stats)||void 0===s?void 0:s.growth)||void 0===i?void 0:i.dic)||void 0===o?void 0:o.hasOwnProperty(e.id))}))}onChangeStatValue(){this.save()}clickRemoveStat(e){delete this.stats.base.dic[e],this.save()}onAddStat(e){this.statsController.postStat({characID:e.id}).then((e=>{if(this.stats.base.dic[e.data.statId]=e.data,this.hasgrowth){let t={functions:[{xFromIncluded:J.gT.MAX_INT,xToExcluded:J.gT.MIN_INT,slopes:[0]}]};this.stats.growth.dic[e.data.statId]=t}console.log("Statsmini bubble up callback: "),console.log(this.stats),this.save()}))}save(){this.callbacksavestat(),this.statsuid&&this.statsController.putStats(this.statsuid,this.stats).then((e=>this.stats=e.data))}};(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],R.prototype,"idsuffix",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Array)],R.prototype,"characsallowed",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Boolean)],R.prototype,"hasgrowth",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Boolean)],R.prototype,"hasadddelete",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Boolean)],R.prototype,"showall",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",Object)],R.prototype,"callbacksavestat",void 0),(0,o.gn)([l.ExJ,B.LO,(0,o.w6)("design:type",Object)],R.prototype,"stats",void 0),(0,o.gn)([l.ExJ,(0,o.w6)("design:type",String)],R.prototype,"statsuid",void 0),R=(0,o.gn)([(0,l.MoW)(i),(0,M.f3)(V.s),(0,o.w6)("design:paramtypes",[V.s])],R)},5041:(e,t,n)=>{n.r(t),n.d(t,{Zone:()=>z});var a={};n.r(a),n.d(a,{default:()=>w,dependencies:()=>S,name:()=>x,register:()=>C,template:()=>k});var s=n(655),i=n(1542),o=n(3379),l=n.n(o),d=n(7795),c=n.n(d),r=n(569),p=n.n(r),f=n(3565),h=n.n(f),g=n(9216),b=n.n(g),m=n(4589),u=n.n(m),v=n(545),y={};y.styleTagTransform=u(),y.setAttributes=h(),y.insert=p().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=b(),l()(v.Z,y),v.Z&&v.Z.locals&&v.Z.locals;const x="zone",k='<table class="effecttable" if.bind="zone">\n  <tbody>\n    <tr>\n      <td>\n        Type\n        \x3c!-- ${zone.zoneType.value} --\x3e\n      </td>\n      <td>\n        <select value.bind="zone.zoneType.value" change.trigger="save()">\n          <option repeat.for="type of Enums.zoneTypes" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n    <tr if.bind="zone.zoneType.value && zone.zoneType.value !== 0">\n      <td>Size</td>\n      <td>\n        <div class="d-flex gap-1">\n          <div class="input-group">\n            <span class="input-group-text" id="basic-addon1">x</span>\n            <input class="input-group-input" type="number" aria-describedby="basic-addon1" value.bind="zone.size.value.x" change.trigger="save()">\n          </div>\n          <div class="input-group collapse" id="collapseZone-${uid}">\n            <span class="input-group-text" id="basic-addon3">r</span>\n            <input class="input-group-input" type="number" aria-describedby="basic-addon3" value.bind="zone.size.value.z" change.trigger="save()">\n          </div>\n          <div if.bind="zoneSizeHasY" class="input-group">\n            <span class="input-group-text" id="basic-addon2">y</span>\n            <input class="input-group-input" type="number" aria-describedby="basic-addon2" value.bind="zone.size.value.y" change.trigger="save()">\n          </div>\n        </div>\n      </td>\n    </tr>\n\n    \x3c!-- <tr class="collapse" id="collapseZone-${uid}"> --\x3e\n    <tr>\n      <td>World Origin</td>\n      <td>\n        <select value.bind="zone.worldOrigin" change.trigger="save()">\n          <option repeat.for="type of Enums.actorTypes" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>World Offset</td>\n      <td>\n        <div class="d-flex gap-1">\n          <input type="number" value.bind="zone.worldOffset.x" change.trigger="save()" />\n          <input type="number" value.bind="zone.worldOffset.z" change.trigger="save()" />\n        </div>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Local Origin</td>\n      <td>\n        <select value.bind="zone.localOrigin" change.trigger="save()">\n          <option repeat.for="type of Enums.direction9" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Rotation</td>\n      <td>\n        <select value.bind="zone.rotation" change.trigger="save()">\n          <option repeat.for="type of Enums.rotation4" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Negative</td>\n      <td>\n        <input type="checkbox" class="btn-check" id="btn-check-outlined isnegative ${uid}" autocomplete="off" checked.bind="zone.negative" change.trigger="onChangeStatValue">\n        <label class="btn btn-outline shadow-none" for="btn-check-outlined isnegative ${uid}">${zone.negative ? \'True\' : \'False\'}</label><br>\n        \x3c!-- <select value.bind="zone.rotation" change.trigger="save()">\n          <option repeat.for="type of Enums.rotation4" model.bind="$index">${type}</option>\n        </select> --\x3e\n      </td>\n    </tr>\n    \n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Sampling Count</td>\n      <td>\n        <input type="number" value.bind="zone.maxSampleCount" change.trigger="save()" />\n      </td>\n    </tr>\n    <tr class="collapse" id="collapseZone-${uid}">\n      <td>Sampling</td>\n      <td>\n        <select value.bind="zone.samplingType" change.trigger="save()">\n          <option repeat.for="type of Enums.samplingTypes" model.bind="$index">${type}</option>\n        </select>\n      </td>\n    </tr>\n    \n\x3c!-- \n  TODO: \n  - bool negative,  \n  - bool canRotate,\n  - list<zone> children\n--\x3e\n\n  </tbody>\n</table>\n',w=k,S=[];let E;function C(e){E||(E=i.b_N.define({name:x,template:k,dependencies:S})),e.register(E)}var $=n(5367),O=n(5746);n(1932);let z=class{constructor(){this.Enums=O.Yb,this.zones2d=[$.Ak.cross,$.Ak.xcross,$.Ak.star,$.Ak.crossHalf,$.Ak.xcrossHalf,$.Ak.rectangle,$.Ak.ellipse,$.Ak.ellipseHalf],this.callbacksave=()=>{},this.minimized=!0}bound(){}get zoneSizeHasY(){return this.zones2d.includes(this.zone.zoneType.value)}get zoneSizeHasZ(){return!0}save(){console.log("Zone save"),this.callbacksave()}clickMinimize(){this.minimized=!this.minimized}};(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],z.prototype,"zone",void 0),(0,s.gn)([i.ExJ,(0,s.w6)("design:type",String)],z.prototype,"uid",void 0),(0,s.gn)([i.ExJ,(0,s.w6)("design:type",Object)],z.prototype,"callbacksave",void 0),z=(0,s.gn)([(0,i.MoW)(Object.assign(Object.assign({},a),{name:"zone"}))],z)}}]);