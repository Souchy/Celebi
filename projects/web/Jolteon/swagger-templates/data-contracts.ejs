<%
const { modelTypes, utils, config } = it;
const { formatDescription, require, _, Ts } = utils;


const dataContractTemplates = {
  enum: (contract) => {
    // CharacteristicType class enums
    if(JSON.stringify(contract.enum).includes("{")) {
      let output = `export class ${contract.name} {`;
      for(let e of contract.enum) {
        output += `static readonly ${e}`;
      }
      // output += `static values: ${contract.name.replace("Types", "")}[] = [`;
      // output += contract.enum.map(e => `${contract.name}.${e.substring(0, e.indexOf(":"))}`).join(", ")
      // output += "];";
      output += `}`;
      return output;
    } else {
      // normal enums
      return `enum ${contract.name} {\r\n${contract.enum} \r\n }`;
    }
  },
  interface: (contract) => {
    if(contract.format === 'specialClass') { // || contract.name == 'EffectSchemaTypes') {
      console.log(contract.name);
    }
    if(contract.format === 'specialClass') {
      while(contract.content.includes(','))
        contract.content.replace(',', ' = null;')
      return `class ${contract.name} {\r\n${contract.content}}`; // interface
    }
    else 
      return `interface ${contract.name} {\r\n${contract.content}}`; // interface
  },
  type: (contract) => {
    return `type ${contract.name} = ${contract.content}`;
  },
}
%>

<% if (config.internalTemplateOptions.addUtilRequiredKeysType) { %>
type <%~ config.Ts.CodeGenKeyword.UtilRequiredKeys %><T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>
      <% } %>

      <% modelTypes.forEach((contract) => { %>
      <%~ includeFile('./data-contract-jsdoc.ejs', { ...it, data: { ...contract, ...contract.typeData } }) %>
      export <%~ (dataContractTemplates[contract.typeIdentifier] || dataContractTemplates.type)(contract) %>


      <% }) %>
